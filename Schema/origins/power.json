{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Origins power JSON schema by S_K_Tiger",
    "type": "object",
    "properties": {
        "type": { "$ref": "#/definitions/type" },
        "name": {
            "type": "string",
            "description": "The display name of the power. Can be a literal string or a translation key."
        },
        "description": {
            "type": "string",
            "description": "The description of the power. Can be a literal string or a translation key."
        },
        "hidden": {
            "type": "boolean",
            "default": false,
            "description": "If set to true, this power will not be displayed in the power list of the origin."
        },
        "condition": { "$ref": "#/definitions/conditions/properties/entity_condition" },
        "loading_priority": {
            "type": "integer",
            "default": 0,
            "description": "Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID."
        }
    },
    "required": [ "type" ],
    "definitions": {
        "type": {
            "$comment": "TODO add more conditional attributes",
            "type": "string",
            "description": "ID of the desired Power Type.",
            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
            "examples": [
                "origins:attribute", "origins:burn", "origins:climbing", "origins:conditioned_attribute",
                "origins:conditioned_restrict_armor", "origins:cooldown", "origins:creative_flight", "origins:damage_over_time",
                "origins:disable_regen", "origins:effect_immunity", "origins:elytra_flight", "origins:entity_glow",
                "origins:entity_group", "origins:exhaust", "origins:fire_immunity", "origins:fire_projectile",
                "origins:ignore_water", "origins:inventory", "origins:invisibility", "origins:invulnerability", "origins:launch",
                "origins:lava_vision", "origins:model_color", "origins:multiple", "origins:night_vision", "origins:particle",
                "origins:phasing", "origins:recipe", "origins:resource", "origins:restrict_armor", "origins:shader", "origins:shaking",
                "origins:simple", "origins:stacking_status_effect", "origins:starting_equipment", "origins:swimming", 
                "origins:toggle_night_vision", "origins:toggle", "origins:walk_on_fluid",

                "origins:action_on_block_break", "origins:action_on_callback", "origins:action_on_item_use", "origins:action_on_land",
                "origins:action_on_wake_up", "origins:action_over_time", "origins:active_self", "origins:attacker_action_when_hit",
                "origins:self_action_on_hit", "origins:self_action_on_kill", "origins:self_action_when_hit",
                "origins:target_action_on_hit",

                "origins:modify_break_speed", "origins:modify_damage_dealt", "origins:modify_damage_taken", "origins:modify_exhaustion",
                "origins:modify_falling", "origins:modify_food", "origins:modify_harvest", "origins:modify_jump",
                "origins:modify_lava_speed", "origins:modify_projectile_damage", "origins:modify_swim_speed", "origins:modify_xp_gain",

                "origins:prevent_block_selection", "origins:prevent_block_use", "origins:prevent_death", "origins:prevent_entity_render",
                "origins:prevent_item_use", "origins:prevent_sleep"
            ]
        },
        "conditions": {
            "type": "object",
            "properties": {
                "entity_condition": {
                    "$comment": "TODO Add conditional atributes",
                    "type": "object",
                    "description": "Entity Conditions operate on a LivingEntity, which also allows access to the world. These are available to be used in most powers in the condition field, which restricts when a power is active.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [
                                "origins:advancement", "origins:air", "origins:attribute", "origins:biome", "origins:block_collision",
                                "origins:block_in_radius", "origins:brightness", "origins:climbing", "origins:collided_horizontally",
                                "origins:command", "origins:daytime", "origins:dimension", "origins:enchantment", "origins:entity_group",
                                "origins:entity_type", "origins:equipped_item", "origins:exposed_to_sky", "origins:exposed_to_sun",
                                "origins:fall_distance", "origins:fall_flying", "origins:fluid_height", "origins:food_level",
                                "origins:gamemode", "origins:health", "origins:in_block_anywhere", "origins:in_block", "origins:in_rain",
                                "origins:in_tag", "origins:invisible", "origins:moving", "origins:on_block", "origins:on_fire",
                                "origins:origin", "origins:power_active","origins:power", "origins:predicate", "origins:relative_health",
                                "origins:resource", "origins:saturation_level","origins:scoreboard", "origins:sneaking",
                                "origins:sprinting", "origins:status_effect", "origins:submerged_in","origins:swimming", "origins:tamed",
                                "origins:using_effective_tool", "origins:using_item", "origins:xp_levels", "origins:xp_points"
                            ]
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": { "properties": { "type": { "const": "origins:and" } } },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/entity_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": { "properties": { "type": { "const": "origins:or" } } },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/entity_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": { "properties": { "type": { "const": "origins:constant" } } },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        }
                    ]
                },
                "block_condition": {
                    "$comment": "TODO Add conditional atributes",
                    "type": "object",
                    "description": "Block Conditions operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [ "origins:adjacent" ],
                            "$comment": "TODO: Add conditional attributes"
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": {
                                "properties": { "type": { "const": "origins:and" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/block_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:or" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/block_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:constant" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        }
                    ]
                },
                "item_condition": {
                    "type": "object",
                    "description": "Item Conditions operate on an ItemStack.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [
                                "origins:armor_value", "origins:enchantment", "origins:food",
                                "origins:harvest_level", "origins:ingredient", "origins:meat"
                            ]
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": {
                                "properties": { "type": { "const": "origins:and" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/item_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:or" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/item_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:constant" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:armor_value" } },
                                "require": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "comparison": {
                                        "enum": [ "<", "<=", ">", ">=", "==", "!=" ],
                                        "description": "How to compare the item's armor value to the specified value."
                                    },
                                    "compare_to": {
                                        "type": "integer",
                                        "description": "Which value to compare the item's armor value to."
                                    }
                                },
                                "required": [ "comparison", "compare_to" ]
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:enchantment" } },
                                "require": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "enchantment": {
                                        "type": "string",
                                        "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                                        "examples": [ "minecraft:fortune" ]
                                    },
                                    "comparison": {
                                        "enum": [ "<", "<=", ">", ">=", "==", "!=" ],
                                        "description": "How to compare the enchantment level the specified value."
                                    },
                                    "compare_to": {
                                        "type": "integer",
                                        "description": "Which value to compare the enchantment level against."
                                    }
                                },
                                "required": [ "comparison", "compare_to" ]
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:harvest_level" } },
                                "require": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "comparison": {
                                        "enum": [ "<", "<=", ">", ">=", "==", "!=" ],
                                        "description": "How to compare the item's harvest level to the specified value."
                                    },
                                    "compare_to": {
                                        "type": "integer",
                                        "description": "Which value to compare the item's harvest level to."
                                    }
                                },
                                "required": [ "comparison", "compare_to" ]
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:ingredient" } },
                                "require": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "ingredient": {
                                        "type": [ "array", "object" ],
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "item": {
                                                    "type": "string",
                                                    "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                                                },
                                                "tag": {
                                                    "type": "string",
                                                    "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                                                }
                                            }
                                        },
                                        "properties": {
                                            "item": {
                                                "type": "string",
                                                "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                                            },
                                            "tag": {
                                                "type": "string",
                                                "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                                            }
                                        },
                                        "description": "The ingredient this item must match to pass the check."
                                    }
                                },
                                "required": [ "ingredient" ]
                            }
                        }
                    ]
                },
                "damage_condition": {
                    "$comment": "TODO Add conditional atributes",
                    "type": "object",
                    "description": "Damage Conditions operate on a combination of DamageSource and Float, allowing to check not only the type of damage dealt, but also how much damage was dealt.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [ "origins:amount" ],
                            "$comment": "TODO: Add conditional attributes"
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": {
                                "properties": { "type": { "const": "origins:and" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/damage_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:or" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/damage_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:constant" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        }
                    ]
                },
                "fluid_condition": {
                    "$comment": "TODO Add conditional atributes",
                    "type": "object",
                    "description": "Fluid Conditions operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [ "origins:empty" ],
                            "$comment": "TODO: Add conditional attributes"
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": {
                                "properties": { "type": { "const": "origins:and" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/fluid_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:or" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/fluid_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:constant" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        }
                    ]
                },
                "biome_condition": {
                    "$comment": "TODO Add conditional atributes",
                    "type": "object",
                    "description": "Biome Conditions operate on a Biome.",
                    "properties": {
                        "type": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                            "examples": [ "origins:category" ],
                            "$comment": "TODO: Add conditional attributes"
                        },
                        "inverted": {
                            "type": "boolean",
                            "default": false,
                            "description": "If true, the condition acts inverted."
                        }
                    },
                    "required": [ "type" ],
                    "allOf": [
                        {
                            "$comment": "#region meta Is there a better way to do this?",
                            "if": {
                                "properties": { "type": { "const": "origins:and" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/biome_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:or" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "array",
                                        "items": { "$ref": "#/definitions/conditions/properties/biome_condition" }
                                    }
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": { "type": { "const": "origins:constant" } },
                                "required": [ "type" ]
                            },
                            "then": {
                                "properties": {
                                    "conditions": {
                                        "type": "boolean",
                                        "description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
                                    }
                                }
                            },
                            "$comment": "#endregion meta"
                        }
                    ]
                }
            },
            "description": "Group for conditions"
        },
        "damage_source": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the damage source. Controls death message as well as other interactions. Consider https://origins.readthedocs.io/en/latest/misc/vanilla_damage_sources/ when picking a name.",
                    "$comment": "TODO add more examples",
                    "examples": [ "anvil", "arrow", "badRespawnPoint", "cactus", "cramming", "dragonBreath", "drown", "dryout", "explosion.player", "explosion", "generic" ]
                },
                "bypasses_armor": {
                    "type": "boolean",
                    "defaut": false,
                    "description": "When true, armor values are not taken into account when calculating the actual damage amount taken."
                },
                "fire": {
                    "type": "boolean",
                    "defaut": false,
                    "description": "When true, the damage will be considered fire damage."
                },
                "unblockable": {
                    "type": "boolean",
                    "defaut": false,
                    "description": "When true, the damage will be unblockable (not reduced by resistance effects or protection enchantments)."
                },
                "magic": {
                    "type": "boolean",
                    "defaut": false,
                    "description": "When true, the damage will be considered magic damage."
                },
                "out_of_world": {
                    "type": "boolean",
                    "defaut": false,
                    "description": "When true, the damage will be considered \"out of world\" damage, i.e. damage from falling into the void."
                }
            },
            "required": [ "name", "bypasses_armor", "fire", "unblockable", "magic", "out_of_world" ]
        },
        "hud_render": {
            "type": "object",
            "properties": {
                "should_render": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether the bar should be visible or not."
                },
                "sprite_location": {
                    "type": "string",
                    "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                    "default": "origins:textures/gui/resource_bar.png",
                    "description": "The path to the file in the assets which contains what the bar looks like. See https://origins.readthedocs.io/en/latest/misc/resource_bars/ for a list of files included by default in the mod."
                },
                "bar_index": {
                    "type": "integer",
                    "default": 0,
                    "description": "The indexed position of the bar on the sprite to use. Please note that indexes start at 0."
                },
                "condition": { "$ref": "#/definitions/conditions/properties/entity_condition" }
            }
        },
        "key": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "A string specifying the keybinding. See https://origins.readthedocs.io/en/latest/misc/keybindings/ for possible values.",
                    "pattern": "^[a-z0-9\\-\\_\\.]+$",
                    "examples": [ "key.origins.primary_active", "key.origins.secondary_active" ]
                },
                "continuous": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the keybinding should only trigger the power on the first tick the key is held down, or, if set to true, continuously on each tick while the key is held."
                }
            },
            "description": "An Object which defines a keybinding, used in active powers to define which key they react to.",
            "required": [ "key" ]
        },
        "modifier": {
            "type": "object",
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "ID of the attribute which will be modified by this modifier.",
                    "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                    "examples": [ "minecraft:generic.attack_speed" ]
                },
                "name": {
                    "type": "string",
                    "description": "A descriptive name for the modifier, describing where it comes from."
                },
                "operation": {
                    "type": "string",
                    "description": "The operation which will be performed by this modifier.",
                    "enum": [ "addition", "multiply_base", "multiply_total" ]
                },
                "value": {
                    "type": "number",
                    "description": "The value with which to apply the operation to the value."
                }
            },
            "description": "If specified, this modifier will be applied to its corresponding attribute.",
            "required": [ "attribute", "operation", "value" ]
        }
    },
    "allOf": [
        {
            "$comment": "#region \"$ref\": \"#/definitions/type\" Regular types",
            "if": {
                "definitions": { "type": { "const": "origins:attribute" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "modifier": { "$ref": "#/definitions/modifier" },
                    "modifiers": {
                        "type": "array",
                        "items": { "$ref": "#/definitions/modifier" },
                        "description": "If specified, these modifiers will be applied to their corresponding attributes."
                    },
                    "update_health": {
                        "type": "boolean",
                        "default": true,
                        "description": "When true, the player's health percentage will update to match their new maximum health."
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:burn" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "interval": {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Interval between being set on fire, in ticks."
                    },
                    "burn_duration": {
                        "type": "integer",
                        "minimum": 0,
                        "description": "Time the fire should last on the player each time it is set, in seconds."
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:climbing" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "allow_holding": {
                        "type": "boolean",
                        "default": true,
                        "description": "If true, the player is able to hold onto blocks."
                    },
                    "hold_condition": {
                        "entity_condition": { "$ref": "#/definitions/conditions/properties/entity_condition" },
                        "description": "If set and allow_holding is true, players with the power who are sneaking and meet this condition are \"holding onto the block\", meaning they won't be affected by gravity."
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:conditioned_attribute" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "modifier": { "$ref": "#/definitions/modifier" },
                    "modifiers": {
                        "type": "array",
                        "items": { "$ref": "#/definitions/modifier" },
                        "description": "If specified, these modifiers will be applied to their corresponding attributes."
                    },
                    "tick_rate": {
                        "type": "integer",
                        "default": 20,
                        "description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost."
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:conditioned_restrict_armor" } },
                "required": [ "type" ]
            },
            "$comment": "TODO: check https://origins.readthedocs.io/en/latest/power_types/conditioned_restrict_armor/ when fixed",
            "then": {
                "properties": {
                    "head": { "$ref": "#/definitions/conditions/properties/item_condition" },
                    "chest": { "$ref": "#/definitions/conditions/properties/item_condition" },
                    "legs": { "$ref": "#/definitions/conditions/properties/item_condition" },
                    "feet": { "$ref": "#/definitions/conditions/properties/item_condition" },
                    "condition": {},
                    "tick_rate": {
                        "type": "integer",
                        "default": 80,
                        "description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost."
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:cooldown" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "cooldown": {
                        "type": "integer",
                        "description": "Cooldown duration in ticks."
                    },
                    "hud_render": { "$ref": "#/definitions/hud_render" }
                },
                "required": [ "cooldown", "hud_render" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:damage_over_time" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "interval": {
                        "type": "integer",
                        "description": "Duration of ticks to wait between the damage."
                    },
                    "onset_delay": {
                        "type": "integer",
                        "description": "How many ticks the power has to be active in order to apply the first damage. If not set, this will be equal to interval."
                    },
                    "damage": {
                        "type": "number",
                        "description": "How much damage will be dealt each interval."
                    },
                    "damage_easy": {
                        "type": "number",
                        "description": "How much damage will be dealt each interval on Easy difficulty. If not set, this will be equal to damage."
                    },
                    "damage_source": { "$ref": "#/definitions/damage_source" },
                    "protection_enchantment": {
                        "type": "string",
                        "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                        "description": "If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the onset_delay."
                    },
                    "protection_effectiveness": {
                        "type": "number",
                        "default": 1.0,
                        "description": "If protection_enchantment is set, this multiplier scales how effective it will be (1.0 = time the onset_delay is increased is the same as with Hydrophobia and Water Protection)."
                    }
                },
                "required": [ "interval", "damage" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:effect_immunity" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "effect": {
                        "type": "string",
                        "description": "If specified, the effect with this ID can not be applied to the player.",
                        "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                    },
                    "effects": {
                        "type": "array",
                        "description": "If specified, the effects with these IDs can not be applied to the player.",
                        "items": {
                            "type": "string",
                            "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$"
                        }
                    }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:elytra_flight" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "render_elytra": {
                        "type": "boolean",
                        "description": "Whether an Elytra should render on the player's back while this power is active."
                    }
                },
                "required": [ "render_elytra" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:entity_glow" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "entity_condition": { "$ref": "#/definitions/conditions/properties/entity_condition" }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:entity_group" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "The group to associate with the player. One of default, undead, arthropod, illager, or aquatic. See https://minecraft.fandom.com/wiki/Mob#Classification for more information about the entity groups",
                        "enum": [ "default", "undead", "arthropod", "illager", "aquatic" ]
                    }
                },
                "required": [ "group" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:exhaust" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "interval": {
                        "type": "integer",
                        "description": "Duration of ticks to wait between applying exhaustion."
                    },
                    "exhaustion": {
                        "type": "number",
                        "description": "How much exhaustion will be applied each interval."
                    }
                },
                "required": [ "interval", "exhaustion" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:fire_projectile" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "entity_type": {
                        "type": "string",
                        "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                        "description": "The ID of the entity type that will be fired."
                    },
                    "cooldown": {
                        "type": "integer",
                        "description": "The number of ticks the player has to wait between uses of this power."
                    },
                    "hud_render": { "$ref": "#/definitions/hud_render" },
                    "count": {
                        "type": "integer",
                        "default": 1,
                        "description": "The amount of projectiles to fire each use."
                    },
                    "speed": {
                        "type": "number",
                        "default": 1.5,
                        "description": "The speed applied to the fired projectile."
                    },
                    "divergence": {
                        "type": "number",
                        "default": 1.0,
                        "description": "How much each projectile fired is affected by random spread."
                    },
                    "sound": {
                        "type": "string",
                        "pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.]+$",
                        "description": "If set, the sound with this ID will be played when the power is used."
                    },
                    "tag": {
                        "type": "string",
                        "description": "NBT data of the entity.",
                        "$comment": "TODO: search for a patern for NBT data"
                    },
                    "key": { "$ref": "#/definitions/key" }
                },
                "required": [ "entity_type", "cooldown", "hud_render" ]
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:inventory" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "name": {
                        "type": "string",
                        "default": "container.inventory",
                        "description": "The translation key or literal text to use as the display name for the inventory."
                    },
                    "drop_on_death": {
                        "type": "boolean",
                        "default": false,
                        "description": "When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!)."
                    },
                    "drop_on_death_filter": { "$ref": "#/definitions/conditions/properties/item_condition" },
                    "key": { "$ref": "#/definitions/key" }
                }
            }
        },
        {
            "if": {
                "definitions": { "type": { "const": "origins:invisibility" } },
                "required": [ "type" ]
            },
            "then": {
                "properties": {
                    "render_armor": {
                        "type": "boolean",
                        "description": "Whether or not the player's armor should be shown."
                    }
                },
                "required": [ "render_armor" ]
            },
            "$comment": "#endregion \"$ref\": \"#/definitions/type\" Regular types"
        }
    ]
}