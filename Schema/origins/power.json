{
	"$id": "https://raw.githubusercontent.com/WACriminalG2/PackdevUtils/main/Schema/origins/power.json",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Origins power JSON schema by S_K_Tiger",
	"description": "See: https://origins.readthedocs.io/en/latest/power_json/ if you have any questions.\nFound any mistakes? Open a issue at https://github.com/WACriminalG2/PackdevUtils/issues",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "ID of the desired Power Type.",
			"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
			"examples": [
				"origins:attribute_modify_transfer", "origins:attribute", "origins:burn", "origins:climbing", "origins:conditioned_attribute",
				"origins:conditioned_restrict_armor", "origins:cooldown", "origins:creative_flight", "origins:damage_over_time",
				"origins:disable_regen", "origins:effect_immunity", "origins:elytra_flight", "origins:entity_glow",
				"origins:entity_group", "origins:exhaust", "origins:fire_immunity", "origins:fire_projectile", "origins:freeze",
				"origins:ignore_water", "origins:inventory", "origins:invisibility", "origins:invulnerability", "origins:item_on_item",
				"origins:launch", "origins:lava_vision", "origins:model_color", "origins:multiple", "origins:night_vision", "origins:overlay",
				"origins:particle", "origins:phasing", "origins:recipe", "origins:resource", "origins:restrict_armor", "origins:self_glow",
				"origins:shader", "origins:shaking", "origins:simple", "origins:stacking_status_effect", "origins:starting_equipment",
				"origins:status_bar_texture", "origins:swimming", "origins:toggle_night_vision", "origins:toggle", "origins:tooltip",
				"origins:walk_on_fluid",

				"origins:action_on_being_used", "origins:action_on_block_break", "origins:action_on_callback", "origins:action_on_entity_use",
				"origins:action_on_hit", "origins:action_on_item_use", "origins:action_on_land", "origins:action_on_wake_up",
				"origins:action_over_time", "origins:action_when_damage_taken", "origins:action_when_hit", "origins:active_self",
				"origins:attacker_action_when_hit", "origins:self_action_on_hit", "origins:self_action_on_kill", "origins:self_action_when_hit",
				"origins:target_action_on_hit",

				"origins:modify_air_speed", "origins:modify_block_render", "origins:modify_break_speed", "origins:modify_camera_submersion",
				"origins:modify_crafting", "origins:modify_damage_dealt", "origins:modify_damage_taken", "origins:modify_exhaustion",
				"origins:modify_falling", "origins:modify_fluid_render", "origins:modify_food", "origins:modify_harvest", "origins:modify_jump",
				"origins:modify_lava_speed", "origins:modify_player_spawn", "origins:modify_projectile_damage", "origins:modify_swim_speed",
				"origins:modify_xp_gain",

				"origins:prevent_being_used", "origins:prevent_block_selection", "origins:prevent_block_use", "origins:prevent_death",
				"origins:prevent_entity_render", "origins:prevent_item_use", "origins:prevent_sleep"
			]
		},
		"name": {
			"type": "string",
			"description": "The display name of the power. Can be a literal string or a translation key."
		},
		"description": {
			"type": "string",
			"description": "The description of the power. Can be a literal string or a translation key."
		},
		"hidden": {
			"type": "boolean",
			"description": "If set to true, this power will not be displayed in the power list of the origin.",
			"default": false
		},
		"condition": {
			"$ref": "#/definitions/conditions/properties/entity_condition",
			"description": "If set, this power will only be active when the player with this power fulfills the condition."
		},
		"loading_priority": {
			"type": "integer",
			"description": "Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.",
			"default": 0
		},
		"badges": {
			"type": "array",
			"items": {
				"properties": {
					"sprite": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "ID of the texture to be displayed as an icon."
					},
					"text": {
						"type": "string",
						"description": "The string to display when you hover over the icon."
					}
				}
			},
			"description": "If set, it will display icon(s) after the name of the power."
		}
	},
	"required": ["type"],
	"definitions": {
		"conditions": {
			"type": "object",
			"description": "Group for conditions",
			"properties": {
				"bientity_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/bientity_conditions/",
					"type": "object",
					"description": "Bi-entity Conditions operate on a Pair<Entity, Entity>, or in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped. These are available to power types that provides a bientity_condition field, which restricts when a power is active.",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:actor_condition", "origins:both", "origins:either", "origins:invert",
								"origins:target_condition", "origins:undirected",
								"origins:attack_target", "origins:attacker", "origins:can_see",
								"origins:distance", "origins:owner", "origins:riding_recursive",
								"origins:riding_root", "origins:riding"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/and/"
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/bientity_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/or/"
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/bientity_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/constant/"
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:actor_condition" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/actor_condition/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The condition to check for on the acting entity."
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:both" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The condition to check on both the actor and target entity."
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:either" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The condition to check on either actor or target entities."
									}
								},
								"required": [ "condition" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:invert" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "The bi-entity condition to check which will have its 'target' and 'actor' contexts swapped."
									}
								},
								"required": ["bientity_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:target_condition" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "The condition to check for on the target entity."
									}
								},
								"required": ["condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:undirected" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/undirected/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "The condition to check for on the target entity."
									}
								},
								"required": ["condition"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:distance" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/bientity_conditions/distance/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the distance against the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "The distance (in blocks) to compare the distance between the actor and target to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"biome_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/biome_conditions/",
					"type": "object",
					"description": "Biome Conditions operate on a Biome.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:category", "origins:high_humidity", "origins:precipitation", "origins:temperature"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": [ "type" ],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/biome_condition" },
										"minItems": 1
									}
								},
								"required": [ "conditions" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/biome_condition" },
										"minItems": 1
									}
								},
								"required": [ "conditions" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:category" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/biome_conditions/category/"
							},
							"then": {
								"properties": {
									"category": {
										"$comment": "Note: Categories may change after 1.17",
										"type": "string",
										"description": "Which category the biome must be in order to succeed the check. See https://origins.readthedocs.io/en/latest/misc/biome_categories/.",
										"examples": [
											"beach", "desert", "extreme_hills", "forest", "icy", "jungle", "mesa", "mushroom",
											"nether", "none", "ocean", "plains", "river", "savanna", "swamp", "taiga", "the_end"
										]
									}
								},
								"required": ["category"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:precipitation" } },
								"required": [ "type" ],
								"$comment":"https://origins.readthedocs.io/en/latest/biome_conditions/precipitation/"
							},
							"then": {
								"properties": {
									"precipitation": {
										"description": "Which precipitation the biome has to have in order to succeed the check. One of none, rain and snow.",
										"enum": [ "none", "rain", "snow" ]
									}
								},
								"required": [ "precipitation" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:temperature" } },
								"required": [ "type" ],
								"$comment":"https://origins.readthedocs.io/en/latest/biome_conditions/temperature/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the temperature should be compared to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the temperature should be compared to."
									}
								},
								"required": [ "comparison", "compare_to" ]
							}
						}
					]
				},
				"block_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/",
					"type": "object",
					"description": "Block Conditions operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:constant", "origins:or",
								"origins:adjacent", "origins:attachable", "origins:block", "origins:block_state",
								"origins:exposed_to_sky", "origins:fluid", "origins:height", "origins:in_tag", "origins:light_blocking",
								"origins:light_level", "origins:movement_blocking", "origins:offset", "origins:replacable",
								"origins:water_loggable"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": [ "type" ],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/block_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/block_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:offset" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_conditions/offset/"
							},
							"then": {
								"properties": {
									"condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The condition to check with the given offset."
									},
									"x": {
										"type": "integer",
										"description": "How much to offset the position on the x-axis.",
										"default": 0
									},
									"y": {
										"type": "integer",
										"description": "How much to offset the position on the y-axis.",
										"default": 0
									},
									"z": {
										"type": "integer",
										"description": "How much to offset the position on the z-axis.",
										"default": 0
									}
								},
								"required": ["condition"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:adjacent" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/adjacent/"
							},
							"then": {
								"properties": {
									"adjacent_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition that needs to be fulfilled by adjacent blocks to count towards this condition."
									},
									"comparison": {
										"description": "How the number of adjacent blocks which fulfill adjacent_condition should be compared to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the number to."
									}
								},
								"required": [ "adjacent_condition", "comparison", "compare_to" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:block_state" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/block_state/"
							},
							"then": {
								"properties": {
									"property": {
										"type": "string",
										"description": "The name of the property that should be checked. See: https://minecraft.fandom.com/wiki/Block_states#List_of_block_states",
										"examples": [ "facing", "age", "leaves", "stage", "rotation", "open", "occupied", "part", "honey_level", "attachment", "powered" ]
									},
									"comparison": {
										"description": "If the property contains an integer value, this is the comparison the will be used to compare the property's value to the specified compare_to integer.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "integer",
										"description": "If the property contains an integer value, this is the value the property's value will be compared to."
									},
									"value": {
										"type": "boolean",
										"description": "If the property contains a boolean value, this is the value the property needs to be to pass the check."
									},
									"enum": {
										"type": "string",
										"description": "If the property contains different string values, this is the string value the property needs to be to pass the check."
									}
								},
								"required": [ "property" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:block" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/block/"
							},
							"then": {
								"properties": {
									"block": {
										"type": "string",
										"description": "ID of the block that this block needs to be to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": [ "minecraft:diamond_block", "minecraft:emerald_block" ]
									}
								},
								"required": [ "block" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:fluid" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/fluid/"
							},
							"then": {
								"properties": {
									"fluid_condition": {
										"$ref": "#/definitions/conditions/properties/fluid_condition",
										"description": "The fluid condition to check the fluid state at the position."
									}
								},
								"required": [ "fluid_condition" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:height" } },
								"required": [ "type" ],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/height/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the Y position of the block should be compared to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the Y position of the block to."
									}
								},
								"required": [ "comparison", "compare_to" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:in_tag" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "ID of the tag which the block should be in to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:base_stone_overworld"]
									}
								},
								"required": ["tag"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:light_level" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/block_conditions/light_level/"
							},
							"then": {
								"properties": {
									"light_type": {
										"description": "The type of light level to compare. Either sky or block. If no type is provided, the greater value of the two types will be used, which is the \"resulting\" light level of that position.",
										"enum": ["sky", "block"]
									},
									"comparison": {
										"description": "How the light level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the light level at the block's position to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"damage_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/damage_conditions/",
					"type": "object",
					"description": "Damage Conditions operate on a combination of DamageSource and Float, allowing to check not only the type of damage dealt, but also how much damage was dealt.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:amount", "origins:attacker", "origins:fire", "origins:name",
								"origins:projectile"
							]
						},
						"inverted": {
							"type": "boolean",
							"default": false,
							"description": "If true, the condition acts inverted."
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/damage_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/damage_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:amount" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/damage_conditions/amount/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the amount of damage should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value to compare the amount of damage to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:attacker" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/damage_conditions/attacker/"
							},
							"then": {
								"properties": {
									"entity_condition": {
										"$ref": "#/definitions/conditions/properties/entity_condition",
										"description": "If set, the attacking entity must fulfill the provided entity condition in order for this condition to evaluate to true."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:name" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/damage_conditions/name/"
							},
							"then": {
								"properties": {
									"name": {
										"type": "string",
										"description": "Name the damage source should have to pass the check. See https://origins.readthedocs.io/en/latest/misc/vanilla_damage_sources/",
										"examples": [
											"anvil", "arrow", "badRespawnPoint", "cactus", "cramming",
											"dragonBreath", "drown", "dryout", "explosion.player",
											"explosion", "fall", "fallingBlock", "fallingStalactite",
											"fireworks", "flyIntoWall", "freeze", "generic", "hotFloor",
											"indirectMagic", "inFire", "inWall", "lava", "lightningBolt",
											"magic", "mob", "onFire", "outOfWorld", "player", "stalagmite",
											"starve", "sting", "sweetBerryBush", "thorns", "thrown",
											"trident", "wither", "witherSkull",
											"no_water_for_gills", "hurt_by_water", "genericDamageOverTime"
										]
									}
								},
								"required": ["name"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:projectile" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/damage_conditions/projectile/"
							},
							"then": {
								"properties": {
									"projectile": {
										"type": "string",
										"description": "If set, the check will only pass if the projectile was of an entity type with this ID.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:spectral_arrow"]
									}
								}
							}
						}
					]
				},
				"entity_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/",
					"type": "object",
					"description": "Entity Conditions operate on a LivingEntity, which also allows access to the world. These are available to be used in most powers in the condition field, which restricts when a power is active.",
					"properties": {
						"type": {
							"type": "string",
							"description": "ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:advancement", "origins:air", "origins:attribute", "origins:biome", "origins:block_collision",
								"origins:block_in_radius", "origins:brightness", "origins:climbing", "origins:collided_horizontally",
								"origins:command", "origins:creative_flying", "origins:daytime", "origins:dimension", "origins:enchantment",
								"origins:entity_group", "origins:entity_type", "origins:equipped_item", "origins:exists",
								"origins:exposed_to_sky", "origins:exposed_to_sun", "origins:fall_distance", "origins:fall_flying",
								"origins:fluid_height", "origins:food_level", "origins:gamemode", "origins:health", "origins:in_block_anywhere",
								"origins:in_block", "origins:in_rain", "origins:in_tag", "origins:invisible", "origins:living",
								"origins:moving", "origins:nbt", "origins:on_block", "origins:on_fire", "origins:origin", "origins:passenger_recursive",
								"origins:passenger", "origins:power_active","origins:power", "origins:predicate", "origins:relative_health",
								"origins:resource", "origins:riding_recursive", "origins:riding_root", "origins:riding", "origins:saturation_level","origins:scoreboard", "origins:sneaking",
								"origins:sprinting", "origins:status_effect", "origins:submerged_in","origins:swimming", "origins:tamed",
								"origins:using_effective_tool", "origins:using_item", "origins:xp_levels", "origins:xp_points"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/entity_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/entity_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:advancement" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/advancement/"
							},
							"then": {
								"properties": {
									"advancement": {
										"type": "string",
										"description": "ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:story/smelt_iron"]
									}
								},
								"required": ["advancement"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:air" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/air/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the breath (in ticks) should be compared to the specified value.\nPlayers (and most mobs) have a max value of 300 ticks, whilst dolphins have a max value of 4800 ticks. Axolotls, on the other hand, have a max value of 6000 ticks.\nIn order to get the value of a single bubble, you can divide the max value by 10. (max / 10 = value)",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the breath should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:attribute" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/attribute/"
							},
							"then": {
								"properties": {
									"attribute": {
										"type": "string",
										"description": "ID of the attribute of which the value should be checked.\nFor a list of attributes available in vanilla, see https://minecraft.fandom.com/wiki/Attribute#Attributes",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": [
											"generic.max_health ", "generic.follow_range",
											"generic.knockback_resistance", "generic.movement_speed",
											"generic.attack_damage", "minecraft:generic.armor",
											"generic.armor_toughness", "generic.attack_knockback",
											"generic.attack_speed", "generic.luck",
											"horse.jump_strength",
											"generic.flying_speed",
											"zombie.spawn_reinforcements"
										]
									},
									"comparison": {
										"description": "How to compare the attribute's value to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value to compare the attribute's value to."
									}
								},
								"required": ["attribute", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:biome" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"biome": {
										"type": "string",
										"description": "If set, this is the ID of the biome the player needs to be in for this condition to evaluate to true, e.g. minecraft:savanna.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": [ "minecraft:savanna" ]
									},
									"biomes": {
										"type": "array",
										"description": "If set, these are the allowed biome IDs the player can be in for this condition to evaluate to true.",
										"items": {
											"type": "string",
											"description": "If set, this is the ID of the biome the player needs to be in for this condition to evaluate to true, e.g. minecraft:savanna.",
											"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
											"examples": [ "minecraft:savanna" ]
										}
									},
									"condition": {
										"$ref": "#/definitions/conditions/properties/biome_condition",
										"description": "If set, this condition needs to be fulfilled (in addition to having the right ID, if provided) by the biome in order for the condition to evaluate to true."
									}
								},
								"oneOf": [
									{"required": ["biome"]},
									{"required": ["biomes"]},
									{"required": ["condition"]},
									{"required": ["biome", "condition"]},
									{"required": ["biomes", "condition"]}
								]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:block_collision" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/block_collision/"
							},
							"then": {
								"properties": {
									"offset_x": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the X direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									},
									"offset_y": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the Y direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									},
									"offset_z": {
										"type": "number",
										"description": "By how much of the bounding box size should the box be offset in the Z direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
									}
								},
								"required": ["offset_x", "offset_y", "offset_z"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:block_in_radius" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/block_in_radius/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition which is applied to the block at the player's feet."
									},
									"radius": {
										"type": "integer",
										"description": "The radius to check blocks in."
									},
									"shape": {
										"description": "Whether to check in a cube- or a star-shaped form. Either \"cube\" or \"star\".",
										"enum": ["cube", "star"],
										"default": "cube"
									},
									"comparison": {
										"description": "How to compare the attribute's value to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the attribute's value to.",
										"default": 1
									}
								},
								"required": ["block_condition", "radius"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:brightness" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/brightness/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the brightness against the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value to compare the brightness against.\nSee https://origins.readthedocs.io/en/latest/entity_conditions/brightness/",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:command" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/command/"
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "Command to run. origins:command is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"examples": ["execute if score @s objective1 = @s objective2"]
									},
									"comparison": {
										"description": "How to compare the command's result to the specified value.",
										"enum": [ "<", "<=", ">", ">=", "==", "!=" ]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the command's result to."
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:dimension" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/dimension/"
							},
							"then": {
								"properties": {
									"dimension": {
										"type": "string",
										"description": "ID of the dimension the player needs to be in for this condition to evaluate to true. Vanilla dimensions are minecraft:overworld, minecraft:the_nether and minecraft:the_end, but IDs of custom/modded dimensions should also work.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:overworld", "minecraft:the_nether", "minecraft:the_end"]
									}
								},
								"required": ["dimension"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:enchantment" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/enchantment/"
							},
							"then": {
								"properties": {
									"enchantment": {
										"type": "string",
										"description": "ID of the enchantment of interest.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:protection"]
									},
									"calculation": {
										"description": "Which number to compare - either the sum of levels of this enchantment on all of the player's equipment, or the max level of this enchantment on any of the player's equipment.",
										"enum": ["sum", "max"],
										"default": "sum"
									},
									"comparison": {
										"description": "How the enchantment level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the enchantment level to."
									}
								},
								"required": ["enchantment", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:entity_group" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/entity_group/"
							},
							"then": {
								"properties": {
									"group": {
										"description": "Entity group required for the entity to pass the check. One of default, undead, arthropod, illager and aquatic.",
										"enum": ["default", "undead", "arthropod", "illager", "aquatic"]
									}
								},
								"required": ["group"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:entity_type" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/entity_type/"
							},
							"then": {
								"properties": {
									"entity_type": {
										"type": "string",
										"description": "ID of the entity type the entity needs to have to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:creeper"]
									}
								},
								"required": ["entity_type"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:equipped_item" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/equipped_item/"
							},
							"then": {
								"properties": {
									"equipment_slot": {
										"description": "Which equipped item to check. One of: \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
										"enum": ["mainhand", "offhand", "head", "chest", "legs", "feet"]
									},
									"item_condition": {
										"$ref": "#/definitions/conditions/properties/item_condition",
										"description": "Which condition will be applied to the item in the specified slot."
									}
								},
								"required": ["equipment_slot", "item_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:fall_distance" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/fall_distance/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the fall distance should be compared to the specified value.\nNote that the fall distance is 0 if the player has slow falling.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "The value in blocks to compare the fall distance to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:fluid_height" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/fluid_height/"
							},
							"then": {
								"properties": {
									"fluid": {
										"type": "string",
										"description": "ID of the fluid tag of which the height should be checked.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:water", "minecraft:lava"]
									},
									"comparison": {
										"description": "How the fluid height should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the fluid height should be compared to."
									}
								},
								"required": ["fluid", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:food_level" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/food_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the food level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the food level should be compared to.\nThe food level is in the range of 0 to 20."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:gamemode" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/gamemode/"
							},
							"then": {
								"properties": {
									"gamemode": {
										"description": "Name of the gamemode the player should have in order for this condition to evaluate to true.",
										"examples": ["adventure", "creative", "spectator", "survival"]
									}
								},
								"required": ["gamemode"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:health" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/health/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the health of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the health should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:in_block_anywhere" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/in_block_anywhere/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition which blocks need to fulfill in order to count for this power."
									},
									"comparison": {
										"description": "How the number of blocks which overlap and fulfill block_condition should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "The value to compare the number to.",
										"default": 1
									}
								},
								"required": ["block_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:in_block" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/in_block/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "The block condition which is applied to the block at the player's lower body half."
									}
								},
								"required": ["block_condition"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:in_tag" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "ID of the tag the entity type needs to be in to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:skeletons"]
									}
								},
								"required": ["tag"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:nbt" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/nbt/"
							},
							"then": {
								"properties": {
									"nbt": {
										"type": "string",
										"description": "The NBT data to check for.\norigins:nbt is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"examples": ["{Tags: ['example_tag']}"]
									}
								},
								"required": ["nbt"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:on_block" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/on_block/"
							},
							"then": {
								"properties": {
									"block_condition": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If set, a block that satisfies this block condition needs to be right below the player's feet."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:origin" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/origin/"
							},
							"then": {
								"properties": {
									"origin": {
										"type": "string",
										"description": "ID of the origin the player needs to have to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:human"]
									},
									"layer": {
										"type": "string",
										"description": "If set, will check only the layer with the provided ID for the origin.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:origin"]
									}
								},
								"required": ["origin"]
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:passenger_recursive", "origins:passenger"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/passenger/ https://origins.readthedocs.io/en/latest/entity_conditions/passenger_recursive/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will check for the entity/entities that fulfill the bi-entity condition."
									},
									"comparison": {
										"description": "How the number of entities that are currently riding the entity should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the number of entities currently riding the entity should be compared to.",
										"default": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:power_active" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/power_active/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "ID of the power which will be checked for being active. (meaning the player has the power and the power has all conditions fulfilled)",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:phantomize"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:power" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/power/"
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "ID of the power the player needs to have to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:phantomize", "origins:damage_from_potions"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:predicate" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/predicate/"
							},
							"then": {
								"properties": {
									"predicate": {
										"type": "string",
										"description": "ID of the predicate the entity needs to pass.\nNote: This condition is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["example:weather/is_thunderstorm"]
									}
								},
								"required": ["predicate"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:relative_health" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/relative_health/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the relative health of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the relative health should be compared to.\nrelativeHealth = currentHealth / maxHealth",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:resource" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/resource/"
							},
							"then": {
								"properties": {
									"resource": {
										"type": "string",
										"description": "ID of the power type that defines the resource. Must be a Resource (Power Type) which exists on the player.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["example:a_simple_resource"]
									},
									"comparison": {
										"description": "How the resource should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the resource should be compared to."
									}
								},
								"required": ["resource", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:riding_recursive" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/riding_recursive/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will check for the entity/entities that fulfills the bi-entity condition."
									},
									"comparison": {
										"description": "How the number of entities that are currently riding the entity should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="],
										"default": ">="
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the number of entities currently riding the entity should be compared to.",
										"default": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:riding_root", "origins:riding"] } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/riding_root/ https://origins.readthedocs.io/en/latest/entity_conditions/riding/"
							},
							"then": {
								"properties": {
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If specified, it will only check for the entity/entities that fulfills the bi-entity condition."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:saturation_level" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/saturation_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the saturation level should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "number",
										"description": "Which value the saturation level should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:scoreboard" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/scoreboard/"
							},
							"then": {
								"properties": {
									"objective": {
										"type": "string",
										"description": "The name of the scoreboard objective to retrieve the value from and compare.\nDue to the nature of scoreboards, this condition is only effective on the server-side.\nIf the entity does not have the scoreboard objective, this condition always returns false."
									},
									"comparison": {
										"description": "How to compare the objective's value to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the objective's value to."
									}
								},
								"required": ["objective", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:status_effect" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/status_effect/"
							},
							"then": {
								"properties": {
									"effect": {
										"type": "string",
										"description": "ID of the status effect the player should have.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:speed"]
									},
									"min_amplifier": {
										"type": "integer",
										"description": "The minimum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
										"default": 0,
										"maximum": 2147483647
									},
									"max_amplifier": {
										"type": "integer",
										"description": "The maximum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
										"default": 2147483647,
										"maximum": 2147483647
									},
									"min_duration": {
										"type": "integer",
										"description": "The minimum duration in ticks the status effect should have left in order to pass the check.",
										"default": 0,
										"minimum": 0,
										"maximum": 2147483647
									},
									"max_duration": {
										"type": "integer",
										"description": "The maximum duration in ticks the status effect should have left in order to pass the check.",
										"default": 2147483647,
										"minimum": 0,
										"maximum": 2147483647
									}
								},
								"required": ["effect"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:submerged_in" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/submerged_in/"
							},
							"then": {
								"properties": {
									"fluid": {
										"type": "string",
										"description": "ID of the fluid tag that should be checked.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:water", "minecraft:lava"]
									}
								},
								"required": ["fluid"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:using_item" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/using_item/"
							},
							"then": {
								"properties": {
									"item_condition": {
										"$ref": "#/definitions/conditions/properties/item_condition",
										"description": "If specified, the condition will only pass if the item that is being used fulfills this condition."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:xp_levels" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/xp_levels/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the experience level of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the experience level should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:xp_points" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/xp_points/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How the experience points of the player should be compared to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value the experience points should be compared to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						}
					]
				},
				"fluid_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/fluid_conditions/",
					"type": "object",
					"description": "Fluid Conditions operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:empty", "origins:in_tag", "origins:stil"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": [ "type" ],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/fluid_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": { "$ref": "#/definitions/conditions/properties/fluid_condition" },
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:in_tag" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/fluid_conditions/in_tag/"
							},
							"then": {
								"properties": {
									"tag": {
										"type": "string",
										"description": "ID of the tag which the fluid should be in to pass the check.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:water"]
									}
								},
								"required": ["tag"]
							}
						}
					]
				},
				"item_condition": {
					"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/",
					"type": "object",
					"description": "Item Conditions operate on an ItemStack.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:or", "origins:constant",
								"origins:amount", "origins:armor_value", "origins:empty", "origins:enchantment", "origins:fireproof",
								"origins:food", "origins:harvest_level", "origins:ingredient", "origins:meat", "origins:nbt"
							]
						},
						"inverted": {
							"type": "boolean",
							"description": "If true, the condition acts inverted.",
							"default": false
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/item_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:or" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"conditions": {
										"type": "array",
										"description": "Any of these conditions have to be fulfilled in order for this condition to be fulfilled.",
										"items": {"$ref": "#/definitions/conditions/properties/item_condition"},
										"minItems": 1
									}
								},
								"required": ["conditions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:constant" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"value": {
										"type": "boolean",
										"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled."
									}
								},
								"required": ["value"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:amount" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/amount/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "Determines how to compare the number of items in this stack to the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's count value to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:armor_value" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/armor_value/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the item's armor value to the specified value.\nNon-armor items are considered as having an armor value of 0.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's armor value to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:enchantment" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/enchantment/"
							},
							"then": {
								"properties": {
									"enchantment": {
										"type": "string",
										"description": "ID of the enchantment of interest.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:aqua_affinity", "minecraft:bane_of_arthropods", "minecraft:blast_protection", "minecraft:channeling", "minecraft:protection", "minecraft:fortune"]
									},
									"comparison": {
										"description": "How to compare the enchantment level the specified value.",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the enchantment level against."
									}
								},
								"required": ["enchantment", "comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:harvest_level" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/harvest_level/"
							},
							"then": {
								"properties": {
									"comparison": {
										"description": "How to compare the item's harvest level to the specified value.\nItems without a material are considered to have a harvest level of 0.\nSee: https://minecraft.fandom.com/wiki/Tiers",
										"enum": ["<", "<=", ">", ">=", "==", "!="]
										
									},
									"compare_to": {
										"type": "integer",
										"description": "Which value to compare the item's harvest level to."
									}
								},
								"required": ["comparison", "compare_to"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:ingredient" } },
								"require": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/item_conditions/ingredient/"
							},
							"then": {
								"properties": {
									"ingredient": {
										"$ref": "#/definitions/origins_data_types/properties/ingredient",
										"description": "The ingredient this item must match to pass the check."
									}
								},
								"required": ["ingredient"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:nbt" } },
								"require": ["type"]
							},
							"then": {
								"properties": {
									"nbt": {
										"type": "string",
										"description": "The NBT data to check for.",
										"examples": ["{exampleCustomTag: 1b}"]
									}
								},
								"required": ["nbt"]
							}
						}
					]
				}
			}
		},
		"actions": {
			"type": "object",
			"description": "Group for actions",
			"properties": {
				"bientity_action": {
					"$comment": "https://origins.readthedocs.io/en/latest/bientity_actions/",
					"type": "object",
					"description": "Bi-Entity Actions operate on a Pair<Entity, Entity>; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:if_else", "origins:if_else_list",
								"origins:actor_action", "origins:invert", "origins:target_action", "origins:nothing",
								"origins:add_velocity", "origins:mount", "origins:set_in_love", "origins:tame"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"$comment": "https://origins.readthedocs.io/en/latest/meta_actions/",
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).",
										"items": {"$ref": "#/definitions/actions/properties/bientity_action"},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:chance" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"action": {"$ref": "#/definitions/actions/properties/bientity_action"},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:choice" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an element Action and a weight Integer.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/bientity_action"},
												"weight": {"type": "integer"}
											},
											"required": ["action", "weight"]
										},
										"minItems": 2
									}
								},
								"required": [ "actions" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else_list" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an Action and a Condition.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/bientity_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/bientity_condition"}
											},
											"required": ["action", "condition"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {"$ref": "#/definitions/conditions/properties/bientity_condition"},
									"if_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:actor_action" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_actions/actor_action/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action to execute on the actor entity."
									}
								},
								"required": ["action"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:invert" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_actions/invert/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "The bi-entity action to execute which will have its 'target' and 'actor' contexts swapped."
									}
								},
								"required": ["action"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:target_action" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action to execute on the target entity."
									}
								},
								"required": ["action"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:add_velocity" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/bientity_actions/add_velocity/"
							},
							"then": {
								"properties": {
									"x": {
										"type": "number",
										"default": 0,
										"description": "The amount of velocity to add on the x-axis."
									},
									"y": {
										"type": "number",
										"default": 0,
										"description": "The amount of velocity to add on the y-axis."
									},
									"z": {
										"type": "number",
										"default": 0,
										"description": "The amount of velocity to add on the z-axis."
									},
									"set": {
										"type": "boolean",
										"default": false,
										"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it."
									}
								},
								"$comment": "origins:nothing should be used instead if you want no change.",
								"not": {
									"x": {"const": 0 }, "y": {"const": 0 }, "z": {"const": 0},
									"set": {"const": false}
								}
							}
						}
					]
				},
				"block_action": {
					"type": "object",
					"description": "Block Actions operate an action on a selected block or set of blocks.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice","origins:if_else_list", "origins:if_else",
								"origins:offset",
								"origins:add_block", "origins:execute_command", "origins:set_block"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).",
										"items": {"$ref": "#/definitions/actions/properties/block_action"},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:chance" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"action": {"$ref": "#/definitions/actions/properties/block_action"},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:choice" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an element Action and a weight Integer.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/block_action"},
												"weight": {"type": "integer"}
											},
											"required": ["action", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else_list" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an Action and a Condition.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/block_action"},
												"condition": {"$ref": "#/definitions/conditions/properties/block_condition"}
											},
											"required": ["action", "weight"]
										},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"condition": {"$ref": "#/definitions/conditions/properties/block_condition"},
									"if_action": {"$ref": "#/definitions/actions/properties/block_action"},
									"else_action": {"$ref": "#/definitions/actions/properties/block_action"}
								},
								"required": ["condition", "if_action"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:offset" } },
								"required": ["type"],
								"$comment": "https://origins.readthedocs.io/en/latest/meta_actions/offset/"
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The action to apply with the given offset."
									},
									"x": {
										"type": "integer",
										"description": "How much to offset the position on the x-axis.",
										"default": 0
									},
									"y": {
										"type": "integer",
										"description": "How much to offset the position on the y-axis.",
										"default": 0
									},
									"z": {
										"type": "integer",
										"description": "How much to offset the position on the z-axis.",
										"default": 0
									}
								},
								"required": ["action"],
								"anyOf": [
									{"not": {"properties": {"x": {"const": 0 } } } },
									{"not": {"properties": {"y": {"const": 0 } } } },
									{"not": {"properties": {"z": {"const": 0 } } } }
								]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:add_block", "origins:set_block"] } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"block": {
										"type": "string",
										"description": "The ID of the block to place.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:coal_ore"]
									}
								},
								"required": ["block"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:execute_command" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "The command to execute.",
										"examples": ["summon minecraft:item ~ ~ ~ {Item:{id:\"minecraft:wheat\",Count:1}}"]
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command"]
							}
						}
					]
				},
				"entity_action": {
					"type": "object",
					"description": "Entity Actions operate on an Entity. Some more specific actions only have an effect on more specific entity types (e.g. Exhaust (Action) only works on PlayerEntity, as other entities do not have a hunger bar).",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:delay", "origins:if_else", "origins:if_else_list",
								"origins:add_velocity", "origins:add_xp", "origins:apply_effect", "origins:block_action_at",
								"origins:change_resource", "origins:clear_effect", "origins:damage", "origins:dismount",
								"origins:emit_game_event", "origins:equipped_item_action", "origins:execute_command", "origins:exhaust",
								"origins:explode", "origins:extinguish", "origins:feed", "origins:gain_air", "origins:give",
								"origins:grant_power", "origins:heal", "origins:passenger_action", "origins:play_sound", "origins:revoke_power",
								"origins:riding_action", "origins:set_fall_distance", "origins:set_on_fire", "origins:spawn_effect_cloud",
								"origins:spawn_entity", "origins:toggle", "origins:trigger_cooldown"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).",
										"items": {"$ref": "#/definitions/actions/properties/entity_action"},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:chance" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action" 
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:choice" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an element Action and a weight Integer.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/entity_action"},
												"weight": {
													"type": "integer"
												}
											},
											"required": ["action", "weight"]
										},
										"minItems": 2
									}
								},
								"required": [ "actions" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"condition": { "$ref": "#/definitions/conditions/properties/entity_condition"},
									"if_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "The action which is executed when the condition evaluates to true."
									},
									"else_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If present, this action will be executed when the condition evaluates to false."
									}
								},
								"required": ["condition", "if_action"]
							}
						},
						{
							"$comment": "The following meta actions are currently only available as an Entity Action",
							"if": {
								"properties": { "type": { "const": "origins:if_else_list" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an action Action and a condition Condition.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/entity_action"},
												"condition": { "$ref": "#/definitions/conditions/properties/entity_condition"}
											},
											"required": ["action", "condition"],
											"additionalProperties": false
										},
										"minItems": 1
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:delay" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"action": { "$ref": "#/definitions/actions/properties/entity_action" },
									"ticks": {
										"type": "integer",
										"description": "The amount of ticks until the action is executed.",
										"minimum": 1
									}
								},
								"required": ["action", "ticks"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:add_velocity" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"x": {
										"type": "number",
										"description": "The amount of velocity to add on the x-axis.",
										"default": 0
									},
									"y": {
										"type": "number",
										"description": "The amount of velocity to add on the y-axis.",
										"default": 0
									},
									"z": {
										"type": "number",
										"description": "The amount of velocity to add on the z-axis.",
										"default": 0
									},
									"space": {
										"description": "The Space to perform the velocity addition in. See: https://origins.readthedocs.io/en/latest/misc/space/",
										"default": "world",
										"enum": ["world", "local", "velocity", "velocity_normalized", "velocity_horizontal", "velocity_horizontal_normalized"]
									},
									"set": {
										"type": "boolean",
										"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it.",
										"default": false
									}
								},
								"anyOf": [
									{ "required": ["x"] },
									{ "required": ["y"] },
									{ "required": ["z"] }
								]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:add_xp" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"points": {
										"type": "integer",
										"description": "If set, this is the amount experience points that will be given to the player",
										"minimum": 0
									},
									"levels": {
										"type": "integer",
										"description": "If set, this is the amount experience levels that will be given to the player."
									}
								},
								"anyOf": [
									{ "required": ["points"] },
									{ "required": ["levels"] }
								]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:apply_effect" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"effect": {
										"$ref": "#/definitions/origins_data_types/properties/status_effect_instance",
										"description": "If set, this status effect will be applied by this action."
									},
									"effects": {
										"type": "array",
										"description": "If set, these status effects will be applied by this action.",
										"items": { "$ref": "#/definitions/origins_data_types/properties/status_effect_instance" },
										"minItems": 1
									}
								},
								"oneOf": [
									{ "required": ["effect"] },
									{ "required": ["effects"] }
								]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:block_action_at" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"block_action": {
										"$ref": "#/definitions/actions/properties/block_action",
										"description": "The block action to execute."
									}
								},
								"required": ["block_action"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:change_resource" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"resource": {
										"type": "string",
										"description": "ID of the power type that defines the resource. Must be a Resource (Power Type) which exists on the player."
									},
									"change": {
										"type": "integer",
										"description": "This value will be added to the resource (won't go below min or above max of the Resource Resource (Power Type))."
									}
								},
								"required": ["resource", "change"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:clear_effect" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"effect": {
										"type": "string",
										"description": "If specified, the effect with this ID will be cleared. If not specified, all effects will be cleared.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:poison"]
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:damage" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of damage to deal."
									},
									"source": { "$ref": "#/definitions/origins_data_types/properties/damage_source" }
								},
								"required": ["amount", "source"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:emit_game_event" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"event": {
										"type": "string",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"description": "The ID of a game event. See: https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes",
										"examples": [
											"minecraft:step",
											"minecraft:flap",
											"minecraft:swim",
											"minecraft:elytra_free_fall",
											"minecraft:hit_ground",
											"minecraft:block_change", "minecraft:minecart_moving", "minecraft:ring_bell", "minecraft:splash", "minecraft:wolf_shaking",
											"minecraft:drinking_finish", "minecraft:prime_fuse", "minecraft:projectile_shoot",
											"minecraft:mob_interact", "minecraft:projectile_land", "minecraft:eat", "minecraft:entity_damaged",
											"minecraft:equip", "minecraft:shear", "minecraft:ravager_roar",
											"minecraft:block_close", "minecraft:block_unswitch", "minecraft:block_unpress", "minecraft:block_detach", "minecraft:dispense_fail",
											"minecraft:block_open", "minecraft:block_switch", "minecraft:block_press", "minecraft:block_attach",
											"minecraft:block_place", "minecraft:entity_place", "minecraft:fluid_place",
											"minecraft:block_destroy", "minecraft:entity_killed", "minecraft:fluid_pickup",
											"minecraft:fishing_rod_reel_in", "minecraft:container_close", "minecraft:piston_contract", "minecraft:shulker_close",
											"minecraft:fishing_rod_cast", "minecraft:container_open", "minecraft:explode", "minecraft:lightning_strike", "minecraft:piston_extend", "minecraft:shulker_open"
										]
									}
								},
								"required": ["event"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:equipped_item_action" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"equipment_slot": {
										"description": "Which equipped item to execute the action on. One of: \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
										"enum": [ "mainhand", "offhand", "head", "chest", "legs", "feet" ]
									},
									"action": {
										"$ref": "#/definitions/actions/properties/item_action",
										"description": "The item action to execute."
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:execute_command" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"command": {
										"type": "string",
										"description": "The command to execute with the entity as the source (i.e. @s will select the entity itself)."
									},
									"permission_level": {
										"type": "integer",
										"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
										"default": 4,
										"minimum": 0,
										"maximum": 4,
										"deprecated": true
									}
								},
								"required": ["command"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:exhaust" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of exhaustion to apply to the player."
									}
								},
								"required": ["amount"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:explode" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"power": {
										"type": "number",
										"description": "Determines the power of the explosion."
									},
									"destruction_type": {
										"enum": ["destroy", "break", "none"],
										"description": "Determines if the explosion should destroy the terrain, destroy the terrain and drop the loot of the blocks, or none. Accepts either \"destroy\", \"break\" or \"none\".",
										"default": "break"
									},
									"damage_self": {
										"type": "boolean",
										"description": "Determines if the player should take damage from the explosion.",
										"default": true
									},
									"indestructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If set, blocks specified in this block condition object is not destroyed by the explosion."
									},
									"destructible": {
										"$ref": "#/definitions/conditions/properties/block_condition",
										"description": "If set, blocks specified in this block condition object will be the only blocks destroyed by the explosion."
									},
									"create_fire": {
										"type": "boolean",
										"description": "Determines if the explosion should create fire.",
										"default": false
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:feed" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"food": {
										"type": "integer",
										"description": "The food amount to restore."
									},
									"saturation": {
										"type": "number",
										"description": "The saturation amount to restore."
									}
								},
								"required": ["food", "saturation"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:gain_air" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"value": {
										"type": "integer",
										"description": "The amount of breath to restore."
									}
								},
								"required": ["value"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:give" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"stack": {
										"$ref": "#/definitions/origins_data_types/properties/item_stack",
										"description": "The item stack to give to the entity."
									}
								},
								"required": ["stack"]
							}
						},
						{
							"if": {
								"properties": { "type": { "enum": ["origins:grant_power", "origins:revoke_power"] } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"description": "The ID of the power to be granted/revoked to/from the entity.",
										"examples": ["origins:elytra"]
									},
									"source": {
										"type": "string",
										"description": "The source of the power.",
										"examples": ["origins:elytrian"]
									}
								},
								"required": ["power", "source"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:heal" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "number",
										"description": "The amount of health to restore."
									}
								},
								"required": ["amount"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:passenger_action" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If set, executes the specified action on the passenger entity."
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
									},
									"recursive": {
										"type": "boolean",
										"description": "If set to true, executes the specified actions on all the passenger entities, if there are more than one.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:play_sound" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"sound": {
										"type": "string",
										"description": "ID of the sound to play.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:entity.chicken.egg"]
									},
									"volume": {
										"type": "number",
										"description": "The volume of the sound.",
										"default": 1,
										"exclusiveMinimum": 0
									},
									"pitch": {
										"type": "number",
										"description": "The pitch of the sound.",
										"default": 1
									}
								},
								"required": ["sound"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:riding_action" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "If set, executes the specified action on the entity that's been ridden."
									},
									"bientity_action": {
										"$ref": "#/definitions/actions/properties/bientity_action",
										"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
									},
									"bientity_condition": {
										"$ref": "#/definitions/conditions/properties/bientity_condition",
										"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
									},
									"recursive": {
										"type": "boolean",
										"description": "If set to true, executes the specified actions on all entities that are being ridden, if there are more than one.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:set_fall_distance" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"fall_distance": {
										"type": "number",
										"description": "The desired fall distance value."
									}
								},
								"required": ["fall_distance"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:set_on_fire" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"duration": {
										"type": "integer",
										"description": "The amount of seconds the entity should burn.",
										"minimum": 0
									}
								},
								"required": ["duration"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:spawn_effect_cloud" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"radius": {
										"type": "number",
										"description": "The radius of the cloud.",
										"default": 3,
										"exclusiveMinimum": 0
									},
									"radius_on_use": {
										"type": "number",
										"description": "How much the radius should change when an effect is applied.",
										"default": -0.5,
										"exclusiveMaximum": 0
									},
									"wait_time": {
										"type": "integer",
										"description": "How many ticks to wait until the cloud takes effect.",
										"default": 10,
										"minimum": 0
									},
									"effect": {
										"$ref": "#/definitions/origins_data_types/properties/status_effect_instance",
										"description": "If set, this status effect will be applied by the cloud to entities inside of it."
									},
									"effects": {
										"type": "array",
										"description": "If set, these status effects will be applied by the cloud to entities inside of it.",
										"items": {"$ref": "#/definitions/origins_data_types/properties/status_effect_instance"},
										"minItems": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:spawn_entity" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"entity_type": {
										"type": "string",
										"description": "The ID of the entity type that will be spawned.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["minecraft:zombie"]
									},
									"tag": {
										"$comment": "TODO find pattern for tags",
										"type": "string",
										"description": "When set, this NBT data will be applied to the new entity when it is spawned."
									},
									"entity_action": {
										"$ref": "#/definitions/actions/properties/entity_action",
										"description": "When set, this action will be executed on the new entity when it is spawned."
									}
								},
								"required": ["entity_type"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:toggle" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "The namespace and ID of the power that uses the origins:toggle power type.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:phantomize"]
									}
								},
								"required": ["power"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:trigger_cooldown" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"power": {
										"type": "string",
										"description": "ID of the cooldown power which should trigger.",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"examples": ["origins:launch_into_air"]
									}
								},
								"required": ["power"]
							}
						}
					]
				},
				"item_action": {
					"type": "object",
					"description": "Item Actions operate on a stack of items.",
					"properties": {
						"type": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [
								"origins:and", "origins:chance", "origins:choice", "origins:if_else",
								"origins:consume", "origins:damage", "origins:modify"
							]
						}
					},
					"required": ["type"],
					"allOf": [
						{
							"$comment": "#region meta",
							"if": {
								"properties": { "type": { "const": "origins:and" } },
								"required": ["type"]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "These actions will be executed one after the other (but in the same tick).",
										"items": {"$ref": "#/definitions/actions/properties/item_action"},
										"minItems": 2
									}
								},
								"required": ["actions"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:chance" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"action": {
										"$ref": "#/definitions/actions/properties/item_action" 
									},
									"chance": {
										"type": "number",
										"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance)",
										"minimum": 0,
										"maximum": 1
									}
								},
								"required": ["action", "chance"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:choice" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"actions": {
										"type": "array",
										"description": "Array of Objects, each with an element Action and a weight Integer.",
										"items": {
											"type": "object",
											"properties": {
												"action": {"$ref": "#/definitions/actions/properties/item_action"},
												"weight": {
													"type": "integer"
												}
											},
											"required": ["action", "weight"]
										},
										"minItems": 2
									}
								},
								"required": [ "actions" ]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:if_else" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"condition": { "$ref": "#/definitions/conditions/properties/item_condition"},
									"if_action": { "$ref": "#/definitions/actions/properties/item_action" },
									"else_action": { "$ref": "#/definitions/actions/properties/item_action" }
								},
								"required": ["condition", "if_action"]
							},
							"$comment": "#endregion meta"
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:consume" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "integer",
										"description": "The amount of items to remove.",
										"default": 1
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:damage" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"amount": {
										"type": "integer",
										"description": "The amount of damage it should do to the item stack.",
										"default": 1
									},
									"ignore_unbreaking": {
										"type": "boolean",
										"description": "Determines if this action should ignore the Unbreaking enchantment.",
										"default": false
									}
								}
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "origins:modify" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"modifier": {
										"type": "string",
										"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
										"description": "The ID of an item modifier."
									}
								}
							}
						}
					]
				}
			}
		},
		"origins_data_types": {
			"type": "object",
			"description": "Group for https://origins.readthedocs.io/en/latest/data_types/",
			"$comment": "As Comparison and Modifier Operation are basicaly just enum's and badges are only used once they are not included in this list.",
			"properties": {
				"modifier": {
					"type": "object",
					"description": "An Object used to specify how a value should be modified.",
					"properties": {
						"operation": {
							"description": "The operation which will be performed by this modifier.",
							"enum": [ "addition", "multiply_base", "multiply_total" ]
						},
						"value": {
							"type": "number",
							"description": "The value with which to apply the operation to the value."
						},
						"name": {
							"type": "string",
							"description": "A descriptive name for the modifier, describing where it comes from."
						}
					},
					"required": [ "operation", "value" ]
				},
				"attributed_modifier": {
					"type": "object",
					"description": "An Object used to specify how a specific attribute should be modified. Basically an Attribute Modifier with an additional attribute field.",
					"properties": {
						"attribute": {
							"type": "string",
							"description": "ID of the attribute which will be modified by this modifier.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": [ "minecraft:generic.attack_speed" ]
						},
						"operation": {
							"description": "The operation which will be performed by this modifier.",
							"enum": [ "addition", "multiply_base", "multiply_total" ]
						},
						"value": {
							"type": "number",
							"description": "The value with which to apply the operation to the value."
						},
						"name": {
							"type": "string",
							"description": "A descriptive name for the modifier, describing where it comes from."
						}
					},
					"required": [ "attribute", "operation", "value" ]
				},
				"crafting_recipe": {
					"type": "object",
					"description": "An Object specifying a shapeless or shaped crafting recipe. For some more information, see: https://minecraft.gamepedia.com/Recipe",
					"properties": {
						"type": {
							"description": "The type of recipe. Either minecraft:crafting_shaped or minecraft:crafting_shapeless. Other recipe types are not supported.",
							"enum": ["minecraft:crafting_shaped", "minecraft:crafting_shapeless"]
						},
						"id": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"description": "An ID for this recipe. Has to be unique among all recipes, otherwise there will be a conflict."
						},
						"result": {
							"type": "object",
							"description": "The result of the crafting. Note that vanilla does not support NBT tags in the result.",
							"properties": {
								"item": {
									"type": "string",
									"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
								},
								"count": {
									"type": "integer"
								}
							},
							"required": ["item", "count"],
							"additionalProperties": false
						}
					},
					"required": ["type", "id", "result" ],
					"additionalProperties": false,
					"allOf": [
						{
							"if": {
								"properties": { "type": { "const": "minecraft:crafting_shapeless" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"ingredients": {
										"type": "array",
										"description": "These items need to be put in the crafting grid for the recipe.",
										"items": {"$ref": "#/definitions/origins_data_types/properties/ingredient"},
										"uniqueItems": false,
										"minItems": 1
									}
								},
								"required": ["ingredients"]
							}
						},
						{
							"if": {
								"properties": { "type": { "const": "minecraft:crafting_shaped" } },
								"required": [ "type" ]
							},
							"then": {
								"properties": {
									"pattern": {
										"$comment": "As some mods add crafting tables with larger than 3 by 3 grids I've not added a maxItems restiction",
										"type": "array",
										"description": "Specifies the pattern, with each element representing one row. Use a single character to describe one item. A space means that position is empty.",
										"items": {
											"type": "string"
										},
										"minItems": 1
									},
									"key": {
										"type": "object",
										"patternProperties": {
											"^[^\\ ]$": {"$ref": "#/definitions/origins_data_types/properties/ingredient"}
										},
										"minProperties": 1
									}
								},
								"required": ["pattern", "key"]
							}
						}
					]
				},
				"damage_source": {
					"type": "object",
					"description": "An Object used to specify how to deal damage to an entity.",
					"properties": {
						"name": {
							"type": "string",
							"description": "The name of the damage source. Controls death message as well as other interactions. Consider https://origins.readthedocs.io/en/latest/misc/vanilla_damage_sources/ when picking a name.",
							"examples": [
								"anvil", "arrow", "badRespawnPoint", "cactus", "cramming",
								"dragonBreath", "drown", "dryout", "explosion.player",
								"explosion", "fall", "fallingBlock", "fallingStalactite",
								"fireworks", "flyIntoWall", "freeze", "generic", "hotFloor",
								"indirectMagic", "inFire", "inWall", "lava", "lightningBolt",
								"magic", "mob", "onFire", "outOfWorld", "player", "stalagmite",
								"starve", "sting", "sweetBerryBush", "thorns", "thrown",
								"trident", "wither", "witherSkull"
							]
						},
						"bypasses_armor": {
							"type": "boolean",
							"description": "When true, armor values are not taken into account when calculating the actual damage amount taken.",
							"default": false
						},
						"fire": {
							"type": "boolean",
							"description": "When true, the damage will be considered fire damage.",
							"default": false
						},
						"unblockable": {
							"type": "boolean",
							"description": "When true, the damage will be unblockable (not reduced by resistance effects or protection enchantments).",
							"default": false
						},
						"magic": {
							"type": "boolean",
							"description": "When true, the damage will be considered magic damage.",
							"default": false
						},
						"out_of_world": {
							"type": "boolean",
							"description": "When true, the damage will be considered \"out of world\" damage, i.e. damage from falling into the void.",
							"default": false
						}
					},
					"required": [ "name" ],
					"additionalProperties": false
				},
				"hud_render": {
					"type": "object",
					"description": "An Object used to define how a resource or cooldown bar should be rendered.",
					"properties": {
						"should_render": {
							"type": "boolean",
							"description": "Whether the bar should be visible or not.",
							"default": true
						},
						"sprite_location": {
							"type": "string",
							"description": "The path to the file in the assets which contains what the bar looks like. See https://origins.readthedocs.io/en/latest/misc/resource_bars/ for a list of files included by default in the mod.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"default": "origins:textures/gui/resource_bar.png",
							"examples": [
								"origins:textures/gui/resource_bar.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_01.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_02.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_03.png",
								"origins:textures/gui/community/spiderkolo/resource_bar_points_01.png",
								"origins:textures/gui/community/huang/resource_bar_01.png",
								"origins:textures/gui/community/huang/resource_bar_02.png"
							]
						},
						"bar_index": {
							"type": "integer",
							"description": "The indexed position of the bar on the sprite to use. Please note that indexes start at 0.",
							"default": 0,
							"minimum": 0
						},
						"condition": {
							"$ref": "#/definitions/conditions/properties/entity_condition",
							"description": "If set (and should_render is true), the bar will only display when the entity with the power fulfills this condition."
						}
					}
				},
				"ingredient": {
					"type": ["object", "array"],
					"description": "Either: an Object specifying a registered item or item tag. Or: an Array of Objects specifying a registered item or item tag.",
					"items": {
						"type": "object",
						"properties": {
							"item": {
								"type": "string",
								"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
								"description": "ID of a registered item."
							},
							"tag": {
								"type": "string",
								"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
								"description": "ID of an item tag. Will be ignored if item is set."
							}
						},
						"anyOf": [
							{"required": ["item"]},
							{"required": ["tag"]}
						]
					},
					"properties": {
						"item": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"description": "ID of a registered item."
						},
						"tag": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"description": "ID of an item tag. Will be ignored if item is set."
						}
					},
					"additionalProperties": false,
					"anyOf": [
						{"required": ["item"]},
						{"required": ["tag"]},
						{"minItems": 2}
					]
				},
				"item_stack": {
					"type": "object",
					"description": "An Object which defines a new item stack.",
					"properties": {
						"item": {
							"type": "string",
							"description": "ID of a registered item.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
						},
						"amount": {
							"type": "integer",
							"description": "Size of the stack.",
							"default": 1,
							"minimum": 1
						},
						"tag": {
							"$comment": "Is there a better pattern for NBT data?",
							"type": "string",
							"description": "NBT data of the item.",
							"pattern": "\\{.*\\:.*\\}"
						}
					},
					"required": ["item"],
					"additionalProperties": false
				},
				"key": {
					"type": "object",
					"description": "An Object which defines a keybinding, used in active powers to define which key they react to.",
					"properties": {
						"key": {
							"type": "string",
							"description": "A string specifying the keybinding. See https://origins.readthedocs.io/en/latest/misc/keybindings/ for possible values.",
							"pattern": "^[a-z0-9\\-\\_\\.]+$",
							"examples": [ "key.origins.primary_active", "key.origins.secondary_active" ]
						},
						"continuous": {
							"type": "boolean",
							"description": "Whether the keybinding should only trigger the power on the first tick the key is held down, or, if set to true, continuously on each tick while the key is held.",
							"default": false
						}
					},
					"required": [ "key" ],
					"additionalProperties": false
				},
				"positioned_item_stack": {
					"type": "object",
					"description": "An Object which defines a new item stack alongside a position in an inventory. Basically an Item Stack with a slot field.",
					"properties": {
						"item": {
							"type": "string",
							"description": "ID of a registered item.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
						},
						"amount": {
							"type":"integer",
							"description": "Size of the stack.",
							"default": 1,
							"minimum": 1
						},
						"tag": {
							"$comment": "Is there a better pattern for NBT data?",
							"type": "string",
							"description": "NBT data of the item.",
							"pattern": "\\{.*\\:.*\\}"
						},
						"slot": {
							"$comment": "Because certian mods add inventory slots I've not specified a maximum",
							"type": "integer",
							"description": "Inventory slot position of the stack. If not specified, will be the first free slot in the inventory. See https://origins.readthedocs.io/en/latest/misc/positioned_item_stack_slots/ for possible values",
							"minimum": 0
						}
					},
					"required": ["item"],
					"additionalProperties": false
				},
				"status_effect_instance": {
					"type": "object",
					"properties": {
						"effect": {
							"type": "string",
							"description": "ID of the status effect.",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": ["minecraft:slowness"]
						},
						"duration": {
							"type": "integer",
							"description": "Duration of the status effect in ticks.",
							"default": 100,
							"minimum": 1
						},
						"amplifier": {
							"type": "integer",
							"description": "Amplifier of the status effect.",
							"default": 0
						},
						"is_ambient": {
							"type": "boolean",
							"description": "Whether the effect counts as an ambient effect.",
							"default": false
						},
						"show_particles": {
							"type": "boolean",
							"description": "Whether the status effect will spawn particles on the player.",
							"default": true
						},
						"show_icon": {
							"type": "boolean",
							"description": "Whether the status effect will show an icon on the HUD.",
							"default": true
						}
					},
					"required": ["effect"],
					"additionalProperties": false
				}
			}
		}
	},
	"allOf": [
		{
			"$comment": "#region Regular types",
			"if": {
				"properties": { "type": { "const": "origins:attribute_modify_transfer" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"class": {
						"type": "string",
						"description": "The path and ID of the class to transfer the value of an attribute to.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
					},
					"attribute": {
						"type": "string",
						"description": "The namespace and ID of the attribute to transfer the value from.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
					},
					"multiplier": {
						"type": "number",
						"description": "Determines the multiplier for the value.",
						"default": 1.0
					}
				},
				"required": ["class", "attribute"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:attribute" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/attributed_modifier",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/attributed_modifier" }
					},
					"update_health": {
						"type": "boolean",
						"description": "When true, the player's health percentage will update to match their new maximum health.",
						"default": true
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:burn" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval between being set on fire, in ticks.",
						"minimum": 1
					},
					"burn_duration": {
						"type": "integer",
						"description": "Time the fire should last on the player each time it is set, in seconds.",
						"minimum": 0
					}
				},
				"required": ["interval", "burn_duration"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:climbing" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"allow_holding": {
						"type": "boolean",
						"description": "If true, the player is able to hold onto blocks.",
						"default": true
					},
					"hold_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set and allow_holding is true, players with the power who are sneaking and meet this condition are \"holding onto the block\", meaning they won't be affected by gravity."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:conditioned_attribute" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/attributed_modifier",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/attributed_modifier" }
					},
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 20
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:conditioned_restrict_armor" } },
				"required": [ "type" ]
			},
			"$comment": "TODO: check https://origins.readthedocs.io/en/latest/power_types/conditioned_restrict_armor/ when fixed",
			"then": {
				"properties": {
					"head": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"chest": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"legs": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"feet": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 80
					}
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:cooldown" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "Cooldown duration in ticks.",
						"minimum": 0
					},
					"hud_render": { "$ref": "#/definitions/origins_data_types/properties/hud_render" }
				},
				"required": [ "cooldown", "hud_render" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:damage_over_time" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between the damage.",
						"minimum": 0
					},
					"onset_delay": {
						"type": "integer",
						"description": "How many ticks the power has to be active in order to apply the first damage. If not set, this will be equal to interval.",
						"minimum": 0
					},
					"damage": {
						"type": "number",
						"description": "How much damage will be dealt each interval."
					},
					"damage_easy": {
						"type": "number",
						"description": "How much damage will be dealt each interval on Easy difficulty. If not set, this will be equal to damage."
					},
					"damage_source": { "$ref": "#/definitions/origins_data_types/properties/damage_source" },
					"protection_enchantment": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the onset_delay.",
						"minimum": 0
					},
					"protection_effectiveness": {
						"type": "number",
						"default": 1.0,
						"description": "If protection_enchantment is set, this multiplier scales how effective it will be (1.0 = time the onset_delay is increased is the same as with Hydrophobia and Water Protection)."
					}
				},
				"required": [ "interval", "damage" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:effect_immunity" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"effect": {
						"type": "string",
						"description": "If specified, the effect with this ID can not be applied to the player.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"examples": ["minecraft:weakness", "minecraft:strength"]
					},
					"effects": {
						"type": "array",
						"description": "If specified, the effects with these IDs can not be applied to the player.",
						"items": {
							"type": "string",
							"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
							"examples": ["minecraft:weakness", "minecraft:strength"]
						},
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:elytra_flight" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"render_elytra": {
						"type": "boolean",
						"description": "Whether an Elytra should render on the player's back while this power is active."
					}
				},
				"required": [ "render_elytra" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:entity_glow" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, only entities which fulfill this condition will glow for the player with this power."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:entity_group" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"group": {
						"description": "The group to associate with the player. One of default, undead, arthropod, illager, or aquatic. See https://minecraft.fandom.com/wiki/Mob#Classification for more information about the entity groups",
						"enum": [ "default", "undead", "arthropod", "illager", "aquatic" ]
					}
				},
				"required": [ "group" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:exhaust" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between applying exhaustion.",
						"minimum": 1
					},
					"exhaustion": {
						"type": "number",
						"description": "How much exhaustion will be applied each interval."
					}
				},
				"required": [ "interval", "exhaustion" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:fire_projectile" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_type": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "The ID of the entity type that will be fired."
					},
					"cooldown": {
						"type": "integer",
						"description": "The number of ticks the player has to wait between uses of this power.",
						"minimum": 1
					},
					"hud_render": { "$ref": "#/definitions/origins_data_types/properties/hud_render" },
					"count": {
						"type": "integer",
						"description": "The amount of projectiles to fire each use.",
						"default": 1,
						"minimum": 0
					},
					"speed": {
						"type": "number",
						"default": 1.5,
						"description": "The speed applied to the fired projectile."
					},
					"divergence": {
						"type": "number",
						"default": 1.0,
						"description": "How much each projectile fired is affected by random spread."
					},
					"sound": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "If set, the sound with this ID will be played when the power is used."
					},
					"tag": {
						"type": "string",
						"description": "NBT data of the entity.",
						"pattern": "\\{.*\\:.*\\}"
					},
					"key": { "$ref": "#/definitions/origins_data_types/properties/key" }
				},
				"required": [ "entity_type", "cooldown", "hud_render" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:inventory" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The translation key or literal text to use as the display name for the inventory.",
						"default": "container.inventory"
					},
					"drop_on_death": {
						"type": "boolean",
						"default": false,
						"description": "When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!)."
					},
					"drop_on_death_filter": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If this is set, only item stacks matching this condition will be dropped on death."
					},
					"key": { "$ref": "#/definitions/origins_data_types/properties/key" }
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:invisibility" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"render_armor": {
						"type": "boolean",
						"description": "Whether or not the player's armor should be shown."
					}
				},
				"required": [ "render_armor" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:invulnerability" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "Specifies which damage the player will be immune to."
					}
				},
				"required": ["damage_condition"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:item_on_item" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"using_item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, the actions will only trigger when this condition is met by the item used to right-click an item stack."
					},
					"on_item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, the actions will only trigger when this condition is met by the item stack that's been right-clicked."
					},
					"result": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If set, the specified item stack will be given to the player."
					},
					"using_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, this action will be executed on the item stack used to right-click an item stack."
					},
					"on_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, this action will be executed on the item stack that's been right-clicked."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, this action will be executed on the item stack specified in the result field."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player after they used an item on an item."
					}
				},
				"dependencies": {
					"result_item_action": ["result"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:launch" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "The number of ticks the player has to wait between uses of this power.",
						"minimum": 1
					},
					"speed": {
						"type": "number",
						"description": "The speed applied to the player in the upwards direction."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render"
					},
					"sound": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "If set, the sound with this ID will be played when the power is used."
					},
					"key": { "$ref": "#/definitions/origins_data_types/properties/key" }
				},
				"required": ["cooldown", "speed", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:lava_vision" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"s": {
						"type": "number",
						"description": "Near view. Vanilla default is 0.25, or 0.0 if you are under the effect of Fire Resistance."
					},
					"v": {
						"type": "number",
						"description": "Far view. Vanilla default is 1.0, or 3.0 if you are under the effect of Fire Resistance."
					}
				},
				"required": ["s", "v"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:model_color" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"alpha": {
						"type": "number",
						"description": "Value by which the alpha (= transparency) component of the texture will be multiplied.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					}
				},
				"anyOf": [
					{"required": ["red"]},
					{"required": ["green"]},
					{"required": ["blue"]},
					{"required": ["alpha"]}
				]
			}
		},
		{
			"if": {"properties":{"type":{"const":"origins:multiple"}},"required":["type"]},
			"then": {
				"patternProperties": {
					".+": {"$ref": "#"}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:night_vision" } },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:overlay" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"texture": {
						"type": "string",
						"description": "The ID of the texture to use as an overlay.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$"
					},
					"strength": {
						"type": "number",
						"description": "Value by which the alpha (transparency) component of the texture will be multiplied. Range: 0.0 to 1.0.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied. Range: 0.0 to 1.0.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied. Range: 0.0 to 1.0.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied. Range: 0.0 to 1.0.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"draw_mode": {
						"enum": ["nausea", "texture"],
						"description": "Determines whether to treat black as transparent or draw the texture as is (\"nausea\" or \"texture\" respectively)."
					},
					"draw_phase": {
						"enum": ["below_hud", "above_hud"],
						"description": "Determines if the overlay should render below or above the HUD (\"below_hud\" or \"above_hud\" respectively)."
					},
					"hide_with_hud": {
						"type": "boolean",
						"default": true,
						"description": "Determines if the overlay should be hidden if the HUD elements are hidden (with F1)."
					},
					"visible_in_third_person": {
						"type": "boolean",
						"default": false,
						"description": "Determines if the overlay is visible in third person."
					}
				},
				"required": ["texture", "draw_mode", "draw_phase"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:particle" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"particle": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "ID of the particle type to use."
					},
					"frequency": {
						"type": "integer",
						"description": "How often the particles should spawn (interval in ticks).",
						"minimum": 1
					}
				},
				"required": ["particle", "frequency"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:phasing" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"blacklist": {
						"type": "boolean",
						"description": "If set to true, the block_condition will define which blocks the player can NOT move through.",
						"default": false
					},
					"block_condition": { "$ref": "#/definitions/conditions/properties/block_condition" },
					"render_type": {
						"description": "Defines how the phasing will look when inside a block.",
						"enum": ["remove_blocks", "blindness"],
						"default": "blindness"
					},
					"view_distance": {
						"type": "number",
						"default": 10.0,
						"description": "How far the player can look through walls while phasing with the \"blindness\" render_type."
					},
					"phase_down_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "When specified, this condition needs to be fulfilled in order for blocks below the player to become phasable. Defaults to a condition which checks for sneaking.",
						"default": {"type": "origins:and", "conditions": [{"type": "origins:sneaking"}, {"type": "origins:on_block"}]}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:recipe" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"recipe": {
						"$ref": "#/definitions/origins_data_types/properties/crafting_recipe",
						"description": "The recipe to craft, including an id field which can be any arbitrary (but unique) identifier."
					}
				},
				"required": ["recipe"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:resource" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"min": {
						"type": "integer",
						"description": "The minimum value of the resource."
					},
					"max": {
						"type": "integer",
						"description": "The maximum value of the resource."
					},
					"hud_render": {"$ref": "#/definitions/origins_data_types/properties/hud_render"},
					"start_value": {
						"type": "integer",
						"description": "The value of the resource when the player first chooses an origin with this power. If not set, this will be the same as min."
					},
					"min_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever the minimum value is reached."
					},
					"max_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever the maximum value is reached."
					}
				},
				"required": ["min", "max", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:restrict_armor" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"head": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"chest": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"legs": { "$ref": "#/definitions/conditions/properties/item_condition" },
					"feet": { "$ref": "#/definitions/conditions/properties/item_condition" }
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:self_glow" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, only entities which fulfill this condition will see the entity that has the power glow."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If set, only entities which fulfill this bi-entity condition in relation to the entity that has the power will see the entity that has the power glow."
					},
					"use_teams": {
						"type": "boolean",
						"default": true,
						"description": "Whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the red, green and blue fields within this power type."
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the glow will be multiplied. Range: 0 - 1.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the glow will be multiplied. Range: 0 - 1.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the glow will be multiplied. Range: 0 - 1.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:shader" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"shader": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "Specifies the location of the shader resource file to use. For more information about shaders, see: https://minecraft.fandom.com/wiki/Shaders/Before_1.9"
					}
				},
				"required": ["shader"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:stacking_status_effect" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"min_stacks": {
						"type": "integer",
						"description": "The minimum number of stacks. Negative numbers are allowed."
					},
					"max_stacks": {
						"type": "integer",
						"description": "The maximum number of stacks."
					},
					"duration_per_stack": {
						"type": "integer",
						"description": "When the status effects are applied, their duration will be 'stacks * duration_per_stack' in ticks."
					},
					"effect": { "$ref": "#/definitions/origins_data_types/properties/status_effect_instance" },
					"effects": {
						"type": "array",
						"description": "If set, these status effects will be applied by this power.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/status_effect_instance" },
						"minItems": 2
					}
				},
				"required": ["min_stacks", "max_stacks", "duration_per_stack"],
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:starting_equipment" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"stack": {
						"$ref": "#/definitions/origins_data_types/properties/positioned_item_stack",
						"description": "If set, this item stack will be given to the player, optionally into the specified inventory slot."
					},
					"stacks": {
						"type": "array",
						"items": { "$ref": "#/definitions/origins_data_types/properties/positioned_item_stack" },
						"minItems": 2,
						"description": "If set, these item stacks will be given to the player, optionally into the specified inventory slots."
					},
					"recurrent": {
						"type":"boolean",
						"default": false,
						"description": "When set to true, the starting equipment will always be given to the player after they died, otherwise only once when the power is gained."
					}
				},
				"oneOf": [
					{ "required": ["stack"] },
					{ "required": ["stacks"] }
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:status_bar_texture" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"texture": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "The ID of the sprite sheet to replace the default one with. Here's what the vanilla sprite sheet looks like: https://media.discordapp.net/attachments/802622603008409600/893716345055772682/unknown.png"
					}
				},
				"required": ["texture"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:toggle_night_vision" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"active_by_default": {
						"type": "boolean",
						"description": "Whether this power starts in the on or off state.",
						"default": true
					},
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"default": 1.0,
						"minimum": 0,
						"maximum": 1
					},
					"key": { "$ref": "#/definitions/origins_data_types/properties/key" }
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:toggle" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"active_by_default": {
						"type":"boolean",
						"description": "Whether this power starts in the on or off state.",
						"default":true
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.",
						"default": "primary"
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:tooltip" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, only applies the tooltip(s) to the item(s) that meets this condition."
					},
					"text": {
						"type": "string",
						"description": "If set, apply this string as a tooltip."
					},
					"texts": {
						"type": "array",
						"items": { "type": "string" },
						"minItems": 2,
						"description": "If set, apply these strings as a tooltip."
					}
				}
			},
			"$comment": "#endregion Regular types"
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:walk_on_fluid" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"fluid": {
						"type": "string",
						"description": "ID of the fluid tag on which the player should be able to walk.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			},
			"$comment": "#endregion Regular types"
		},
		{
			"$comment": "#region Action-related",
			"if": {
				"properties": { "type": { "enum": ["origins:action_on_entity_use", "origins:action_on_being_used"] } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to be executed if specified."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if the bi-entity condition is fulfilled."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if the item condition is fulfilled by the item in the player's specified hand(s) determined by the hands string field."
					},
					"hands": {
						"type": "array",
						"items": {
							"enum": ["off_hand", "main_hand"]
						},
						"default": ["off_hand", "main_hand"],
						"description": "Determines if the power should be activated if the player used the specified hand(s). Accepts \"off_hand\", \"main_hand\" or both."
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, gives an item stack to the player."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, executes an item action on the item stack used for right-clicking the entity in the specified hand slot."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, executes an item action on the result item stack."
					},
					"action_result": {
						"enum": ["consume", "consume_partial", "fail", "pass", "success"],
						"default": "success",
						"description": "Determines the result of the action. Accepts \"consume\", \"consume_partial\", \"fail\", \"pass\" or \"success\"."
					}
				},
				"dependencies": {
					"result_item_action": ["result_stack"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_block_break" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when a block is broken."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If set, this action will be executed on the block that is broken."
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the actions will only trigger when this block condition is met by the broken block."
					},
					"only_when_harvested": {
						"type": "boolean",
						"description": "If this is true, the actions will only execute when the player succeeds in harvesting the block (e.g. they will not trigger when stone is broken by hand).",
						"default": true
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_callback" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action_chosen": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when the player chooses their origin on the last layer through the menu - by using the Orb of Origin or missing an origin or joining for the first time - if the power was gained from any of the layers."
					},
					"execute_chosen_when_orb": {
						"type": "boolean",
						"description": "When this is false, the entity_action_chosen will not be executed when the player changes their origin with an orb, but only when the player chooses an origin for the first time or their origin was reset to origins:empty via a command.",
						"default": true
					},
					"entity_action_lost": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when the power is lost."
					},
					"entity_action_added": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when the power is added. Joining a world adds each power back."
					},
					"entity_action_removed": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when the power is removed and right after the player respawns. Leaving a world removes each power."
					},
					"entity_action_respawned": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player right after the player respawns, after the entity_action_removed."
					}
				},
				"anyOf": [
					{"required": ["entity_action_chosen"]},
					{"required": ["entity_action_lost"]},
					{"required": ["entity_action_added"]},
					{"required": ["entity_action_removed"]},
					{"required": ["entity_action_respawned"]}
				]
			},
			"$comment": "origins:action_on_entity_use is done at origins:action_on_entity_use"
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to execute upon hit."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the entity that has the power."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the action can be executed again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render": false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If set, the action will only trigger when this bi-entity condition is fulfilled."
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_item_use" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player after they use the item."
					},
					"item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, this action will be executed on the remaining item stack."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, the actions will only trigger when this item condition is met by the item stack before use."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["item_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_land" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_on_wake_up" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player when they wake up."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If set, this action will be executed on the bed block."
					},
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the actions will only trigger when this block condition is met by the bed block."
					}
				},
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["block_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_over_time" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval of ticks between subsequent executions of the action.",
						"minimum": 1
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player each interval."
					},
					"rising_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the first interval tick in which the condition became true."
					},
					"falling_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the first interval tick in which the condition became false."
					}
				},
				"required": ["interval"],
				"anyOf": [
					{"required": ["entity_action"]},
					{"required": ["rising_action"]},
					{"required": ["falling_action"]}
				],
				"dependencies": {
					"rising_action": ["condition"],
					"falling_action": ["condition"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_when_damage_taken" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player each interval."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the action can be executed again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render": false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:action_when_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to execute upon being hit."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If specified, the specified action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the action can be executed again."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"default": {"should_render": false},
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, the specified action will only trigger if the bi-entity condition is fulfilled."
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:active_self" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 1
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"key": {
						"$ref": "#/definitions/origins_data_types/properties/key",
						"description": "Which active key this power should respond to.",
						"default": {"key": "key.origins.primary_active"}
					}
				},
				"required": ["entity_action", "cooldown", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:attacker_action_when_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the attacker."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 0
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the attacker."
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:self_action_on_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 0
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the player."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is hit."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:self_action_on_kill" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 0
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the player."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is killed."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:self_action_when_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 0
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the specified type of damage."
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:target_action_on_hit" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the target."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the action can be executed again.",
						"minimum": 0
					},
					"hud_render": {
						"$ref": "#/definitions/origins_data_types/properties/hud_render",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way."
					},
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the player."
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is hit."
					}
				},
				"required": ["entity_action", "cooldown"]
			},
			"$comment": "#endregion Action-related"
		},
		{
			"$comment": "#region Modifying types",
			"if": {
				"properties": { "type": { "const": "origins:modify_air_speed" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If specified, this modifier will be applied to the entity's air speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the entity's air speed.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_block_render" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, modifies how the block would look like that meets this condition."
					},
					"block": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "The ID of the block that would replace the block that meets the condition from the block_condition object field would look like."
					}
				},
				"required": [ "block" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_break_speed" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the modifiers will only apply to blocks which satisfy this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the break speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the break speed.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_camera_submersion" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"from": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to modify. Can be none, water or lava."
					},
					"to": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to change to. Can be none, water or lava."
					}
				},
				"anyOf": [
					{"required": ["from"]},
					{"required": ["to"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_crafting" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"recipe": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "The ID of the recipe to be modified."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, it will only apply the item stack from the result field, and trigger the actions when this condition is met by the result item from the crafting recipe."
					},
					"result": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If set, replaces the result item stack of the recipe."
					},
					"item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If set, execute this item action on the result item stack."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, execute this entity action on the player."
					},
					"block_action": {
						"$ref": "#/definitions/actions/properties/block_action",
						"description": "If set, execute this block action at the block used for crafting the recipe."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_damage_dealt" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the modifiers will only apply to damage which satisfies this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the damage amount.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is hit."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever this power applies a modification."
					},
					"target_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the target whenever this power applies a modification."
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_damage_taken" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/damage_condition",
						"description": "If set, the modifiers will only apply to damage which satisfies this condition."
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the damage amount.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is hit."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever this power applies a modification."
					},
					"attacker_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the attacker whenever this power applies a modification."
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_exhaustion" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the exhaustion amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the exhaustion amount.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_falling" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"velocity": {
						"type": "number",
						"description": "How slow/fast the falling velocity should be. By default, the player falls at a speed of 0.08, or 0.01 if a slow falling potion is active."
					},
					"take_fall_damage": {
						"type": "boolean",
						"description": "Whether the player should take fall damage or not.",
						"default": true
					}
				},
				"required": ["velocity"]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_fluid_render" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, modifies how the block that meets this condition would look like."
					},
					"fluid_condition": {
						"$ref": "#/definitions/conditions/properties/fluid_condition",
						"description": "If set, modifies how the fluid that meets the condition would look like."
					},
					"fluid": {
						"type": "string",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"description": "The ID of the fluid that would replace how the block/fluid that meets the conditions in the block_condition and/or fluid_condition object field would look like."
					}
				},
				"required": [ "fluid" ]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_food" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, the modifiers will only apply to food items which satisfy this condition."
					},
					"food_modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the food amount gained by eating."
					},
					"food_modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the food amount gained by eating.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"saturation_modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the saturation gained by eating."
					},
					"saturation_modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the saturation gained by eating.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the entity eating this item."
					}
				},
				"allOf": [
					{ "not": {"required": ["food_modifier", "food_modifiers"]} },
					{ "not": {"required": ["saturation_modifier", "saturation_modifiers"]} },
					{
						"anyOf": [
							{"required": ["food_modifier"]},
							{"required": ["food_modifiers"]},
							{"required": ["saturation_modifier"]},
							{"required": ["saturation_modifiers"]}
						]
					}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_harvest" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the modification will only apply to blocks which satisfy this condition."
					},
					"allow": {
						"type": "boolean",
						"description": "When true, the player will be able to harvest the blocks. When false, the player will not be able to harvest the blocks."
					}
				},
				"anyOf": [
					{"required": ["block_condition"]},
					{"required": ["allow"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_jump" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the upwards jump velocity."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the upwards jump velocity.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will execute when the player jumps."
					}
				},
				"allOf": [
					{ "not": {"required": ["modifier", "modifiers"]} },
					{
						"anyOf": [
							{"required": ["modifier"]},
							{"required": ["modifiers"]},
							{"required": ["entity_action"]}
						]
					}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_lava_speed" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the speed in lava."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the speed in lava.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_player_spawn" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"dimension": {
						"type": "string",
						"description": "ID of the dimension the player should spawn in.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"examples": [ "minecraft:overworld", "minecraft:the_nether", "minecraft:the_end" ]
					},
					"biome": {
						"type": "string",
						"description": "If set, the player will spawn in the biome with this ID.",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"examples": [ "minecraft:savanna" ]
					},
					"structure": {
						"type": "string",
						"description": "ID of the structure the player should spawn in. Keep in mind that the structure needs to generate in the specified dimension!",
						"pattern": "^([a-z0-9\\-\\_\\.]+\\:)?[a-z0-9\\-\\_\\.\\/]+$",
						"examples": [ "minecraft:endcity" ]
					},
					"spawn_strategy": {
						"type": "string",
						"description": "Either default or center. default tries to find a spawn close to the coordinates of the overworld spawn (while considering the dimension_distance_multiplier). center tries to spawn the player close to 0, 0 of the dimension.",
						"enum": ["default", "center"],
						"default": "default"
					},
					"dimension_distance_multiplier": {
						"type": "number",
						"description": "Needs to be set when spawn_strategy is default. Defines the ratio of overworld blocks to blocks in this dimension, e.g. for the Nether this would be 0.125."
					}
				},
				"required": ["dimension"],
				"if": {
					"properties": { "spawn_strategy": { "const": "default" } },
					"required": [ "spawn_strategy" ]
				},
				"then": {
					"required": ["dimension_distance_multiplier"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_projectile_damage" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, the modifiers will only apply to damage which satisfies this condition.",
						"examples": [{"type": "origins:projectile", "projectile": "minecraft:spectral_arrow"}]
					},
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the damage amount.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					},
					"target_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, the action will only be triggered when a target matching this condition is hit."
					},
					"self_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the player whenever this power applies a modification."
					},
					"target_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "If set, this action will be executed on the target whenever this power applies a modification."
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_swim_speed" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the swim speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the swim speed.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:modify_xp_gain" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "#/definitions/origins_data_types/properties/modifier",
						"description": "If set, this modifier will apply to the experience gained."
					},
					"modifiers": {
						"type": "array",
						"description": "If set, these modifiers will apply to the experience gained.",
						"items": { "$ref": "#/definitions/origins_data_types/properties/modifier" },
						"minItems": 2
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			},
			"$comment": "#endregion Modifying types"
		},
		{
			"$comment": "#region Preventing types",
			"if": {
				"properties": { "type": { "const": "origins:prevent_being_used" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to execute upon preventing other players from right-clicking the entity that has the power if specified."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if the bi-entity condition is fulfilled."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if the item condition is fulfilled by the item in the other player's specified hand(s) equipment slot determined by the hands string field."
					},
					"hands": {
						"type": "array",
						"items": { "enum": ["off_hand", "main_hand"] },
						"default": ["off_hand", "main_hand"],
						"description": "Determines if the power should be activated if the other player used the specified hand slot(s). Accepts \"off_hand\", \"main_hand\" or both."
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, gives an item stack to the player."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, executes an item action on the given item stack."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_block_selection" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "When set, only blocks which meet this condition will be unable to be selected."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_block_use" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "When set, only blocks which meet this condition will be unable to be used."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_death" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, death will only prevented when damage which matches this condition is dealt. Other damage will still kill the player."
					},
					"entity_action": {
						"$ref": "#/definitions/actions/properties/entity_action",
						"description": "The action to execute on the player when death is prevented."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_entity_render" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "#/definitions/conditions/properties/entity_condition",
						"description": "If set, only entities which fulfill this condition will be invisible."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_entity_use" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "#/definitions/actions/properties/bientity_action",
						"description": "The action to execute upon being prevented from right-clicking an entity."
					},
					"bientity_condition": {
						"$ref": "#/definitions/conditions/properties/bientity_condition",
						"description": "If specified, only execute the specified actions if the bi-entity condition is fulfilled."
					},
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If specified, only execute the specified actions if the item condition is fulfilled by the item in the other player's specified hand(s) equipment slot determined by the hands string field."
					},
					"hands": {
						"type": "array",
						"items": { "enum": ["off_hand", "main_hand"] },
						"default": ["off_hand", "main_hand"],
						"description": "Determines if the power should be activated if the player used the specified hand slot(s). Accepts \"off_hand\", \"main_hand\" or both."
					},
					"result_stack": {
						"$ref": "#/definitions/origins_data_types/properties/item_stack",
						"description": "If specified, gives the result item stack to the player."
					},
					"held_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, executes an item action on the item stack used for right-clicking the entity in the specified hand slot."
					},
					"result_item_action": {
						"$ref": "#/definitions/actions/properties/item_action",
						"description": "If specified, executes an item action on the result item stack."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_item_use" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "#/definitions/conditions/properties/item_condition",
						"description": "If set, only items which satisfy this condition will be blocked from being used."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "const": "origins:prevent_sleep" } },
				"required": [ "type" ]
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "#/definitions/conditions/properties/block_condition",
						"description": "If set, sleep will only be prevented if this condition holds for the bed."
					},
					"message": {
						"type": "string",
						"description": "The message that will be shown when sleep is prevented this way. Can be a literal text or a translation key which will be localized using a language file.",
						"default": "origins.cant_sleep"
					},
					"set_spawn_point": {
						"type": "boolean",
						"description": "If true, right-clicking the bed while sleeping is prevented with this power will still set the spawn point (similar to what happens when you right-click a bed while it's daytime).",
						"default": false
					}
				}
			},
			"$comment": "#endregion Preventing types"
		}
	]
}